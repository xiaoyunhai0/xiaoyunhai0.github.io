<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flappy Bird 可热更化实战：C# → XLua 迁移</title>
      <link href="/2025/08/07/Flappy-Bird-XLua-Migration/"/>
      <url>/2025/08/07/Flappy-Bird-XLua-Migration/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标：把传统 C# 玩法完整迁到脚本热更新架构，做到“<strong>玩法用 Lua 快速迭代</strong>、<strong>C# 只做稳定桥接</strong>”，并可平滑切换到 Addressables 远程脚本加载。<br>仓库：<a href="https://github.com/xiaoyunhai0/flappy_bird_xlua-">https://github.com/xiaoyunhai0/flappy_bird_xlua-</a></p></blockquote><span id="more"></span><h2 id="一、项目概览（做了什么）"><a href="#一、项目概览（做了什么）" class="headerlink" title="一、项目概览（做了什么）"></a>一、项目概览（做了什么）</h2><ul><li><p><strong>边界划分</strong></p><ul><li><strong>C#（Bridge）</strong>：生命周期转发、依赖注入、加载器、平台差异、AOT 配置。</li><li><strong>Lua（Gameplay）</strong>：输入、重力&#x2F;位姿、管道生成与<strong>对象池</strong>、计分&#x2F;死亡、UI 同步、背景滚动。</li></ul></li><li><p><strong>性能策略</strong>：<strong>对象池复用</strong>、<strong>跨语言类型局部缓存</strong>、<strong>GC Tick 秒级节流</strong>、<strong>DOTween Sequence 替协程</strong>。</p></li><li><p><strong>兼容策略</strong>：优先 <code>TMP_Text</code>，自动回落 <code>UI.Text</code>。</p></li><li><p><strong>上线策略</strong>：本地 <code>Resources</code> → 可切换 <strong>Addressables 远程 Loader</strong>；IL2CPP 用 <code>link.xml</code> 与白名单保活。</p></li></ul><hr><h2 id="二、目录结构与迁移策略"><a href="#二、目录结构与迁移策略" class="headerlink" title="二、目录结构与迁移策略"></a>二、目录结构与迁移策略</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Assets/</span><br><span class="line">├─ Scripts_Bird/                    # 旧 C# 玩法（保留用于对齐&amp;回滚）</span><br><span class="line">│  ├─ GameManager.cs</span><br><span class="line">│  ├─ Player.cs</span><br><span class="line">│  ├─ Pipes.cs</span><br><span class="line">│  ├─ Spawner.cs</span><br><span class="line">│  └─ Parallax.cs</span><br><span class="line">├─ Resources/</span><br><span class="line">│  └─ Lua/</span><br><span class="line">│     ├─ flappy_bird.lua.txt       # 主玩法（鸟/生成/计分/UI）</span><br><span class="line">│     └─ util.lua.txt              # 通用工具（TMP/Text 兼容等）</span><br><span class="line">└─ Runtime/Lua/</span><br><span class="line">   ├─ WidgetLuaBehaviour.cs        # C#↔Lua 桥（生命周期/注入/GC/Loader）</span><br><span class="line">   ├─ GenConfig.cs                 # xLua 暴露/回调类型配置</span><br><span class="line">   └─ link.xml                     # IL2CPP 剪裁保活</span><br></pre></td></tr></table></figure><blockquote><p>策略：先<strong>并行</strong>（C# 与 Lua 共存）→ 体验对齐 → 逐步下线旧 C#；全程可回滚。</p></blockquote><hr><h2 id="三、运行时数据流与分层"><a href="#三、运行时数据流与分层" class="headerlink" title="三、运行时数据流与分层"></a>三、运行时数据流与分层</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UI（TMP_Text / Button）</span><br><span class="line">  └─ Lua 玩法（flappy_bird.lua / util.lua）</span><br><span class="line">      └─ C# 桥（WidgetLuaBehaviour：生命周期/注入/Loader/GC）</span><br><span class="line">          └─ 引擎（Transform / Physics2D / DOTween）</span><br><span class="line">              └─ 系统（MonoBehaviour / Time / Input）</span><br></pre></td></tr></table></figure><ul><li><strong>Awake</strong>：C# 创建 <code>LuaEnv + LuaTable</code>，注入 <code>self</code> 与 <code>Injection[]</code>，<code>DoString()</code> 执行 Lua。</li><li><strong>Start&#x2F;Update&#x2F;OnEnable&#x2F;…</strong>：C# 缓存同名 Lua 函数并逐帧转发。</li><li><strong>Lua</strong>：统一输入→速度&#x2F;位姿；<strong>Sequence</strong> 驱动帧动画与生成；<strong>对象池</strong>复用管道；文本优先 <strong>TMP</strong>，回落 <strong>Text</strong>。</li></ul><hr><h2 id="四、C-→Lua-桥（核心节选：Runtime-Lua-WidgetLuaBehaviour-cs）"><a href="#四、C-→Lua-桥（核心节选：Runtime-Lua-WidgetLuaBehaviour-cs）" class="headerlink" title="四、C#→Lua 桥（核心节选：Runtime/Lua/WidgetLuaBehaviour.cs）"></a>四、C#→Lua 桥（核心节选：<code>Runtime/Lua/WidgetLuaBehaviour.cs</code>）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: WidgetLuaBehaviour.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> using</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">using</span> DG.Tweening;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Project.Runtime.Lua</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> XLua Expose Types</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Gen</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">LuaCallCSharp</span>] <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; LuaCallTypes = <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">typeof</span>(GameObject), <span class="keyword">typeof</span>(Transform),</span><br><span class="line">            <span class="keyword">typeof</span>(Vector2), <span class="keyword">typeof</span>(Vector3), <span class="keyword">typeof</span>(Quaternion),</span><br><span class="line">            <span class="keyword">typeof</span>(Time), <span class="keyword">typeof</span>(Debug),</span><br><span class="line">            <span class="keyword">typeof</span>(TMPro.TextMeshProUGUI), <span class="keyword">typeof</span>(TMPro.TextMeshPro),</span><br><span class="line">            <span class="keyword">typeof</span>(DOVirtual), <span class="keyword">typeof</span>(Tween), <span class="keyword">typeof</span>(Sequence), <span class="keyword">typeof</span>(Tweener)</span><br><span class="line">        &#125;;</span><br><span class="line">        [<span class="meta">CSharpCallLua</span>] <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">LuaAction</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Serializable</span>] <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Injection</span> &#123; <span class="keyword">public</span> <span class="built_in">string</span> name; <span class="keyword">public</span> UnityEngine.Object <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">WidgetLuaBehaviour</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">string</span> resourcesPath = <span class="string">&quot;Lua/flappy_bird&quot;</span>;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> TextAsset luaScript;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Injection[] injections;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> LuaEnv &amp; Cache</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> LuaEnv Env = <span class="keyword">new</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> GcInterval = <span class="number">1f</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> _lastGc;</span><br><span class="line">        <span class="keyword">private</span> LuaTable _env;</span><br><span class="line">        <span class="keyword">private</span> Action _onStart, _onUpdate, _onEnable, _onDisable, _onDestroy, _onAwake;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Unity Lifecycle</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Env.AddLoader(CustomLoader);</span><br><span class="line"></span><br><span class="line">            luaScript ??= Resources.Load&lt;TextAsset&gt;(resourcesPath);</span><br><span class="line">            <span class="keyword">if</span> (!luaScript) &#123; Debug.LogError(<span class="string">&quot;Lua script missing.&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">            _env = Env.NewTable();</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> meta = Env.NewTable();</span><br><span class="line">            meta.Set(<span class="string">&quot;__index&quot;</span>, Env.Global);</span><br><span class="line">            _env.SetMetaTable(meta);</span><br><span class="line"></span><br><span class="line">            _env.Set(<span class="string">&quot;self&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (injections != <span class="literal">null</span>) <span class="keyword">foreach</span> (<span class="keyword">var</span> it <span class="keyword">in</span> injections) _env.Set(it.name, it.<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">            Env.DoString(luaScript.text, luaScript.name, _env);</span><br><span class="line">            _onAwake   = _env.Get&lt;Action&gt;(<span class="string">&quot;Awake&quot;</span>);</span><br><span class="line">            _onStart   = _env.Get&lt;Action&gt;(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">            _onUpdate  = _env.Get&lt;Action&gt;(<span class="string">&quot;Update&quot;</span>);</span><br><span class="line">            _onEnable  = _env.Get&lt;Action&gt;(<span class="string">&quot;OnEnable&quot;</span>);</span><br><span class="line">            _onDisable = _env.Get&lt;Action&gt;(<span class="string">&quot;OnDisable&quot;</span>);</span><br><span class="line">            _onDestroy = _env.Get&lt;Action&gt;(<span class="string">&quot;OnDestroy&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _onAwake?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>     =&gt; _onStart?.Invoke();</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span>  =&gt; _onEnable?.Invoke();</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span> =&gt; _onDisable?.Invoke();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _onUpdate?.Invoke();</span><br><span class="line">            <span class="keyword">if</span> (Time.time - _lastGc &gt; GcInterval) &#123; Env.Tick(); _lastGc = Time.time; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _onDestroy?.Invoke();</span><br><span class="line">            _onStart = _onUpdate = _onEnable = _onDisable = _onDestroy = _onAwake = <span class="literal">null</span>;</span><br><span class="line">            _env?.Dispose(); _env = <span class="literal">null</span>; injections = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Loader（示例：固定加载 util，可换 Addressables）</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">CustomLoader</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ta = Resources.Load&lt;TextAsset&gt;(<span class="string">&quot;Lua/util&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ta ? System.Text.Encoding.UTF8.GetBytes(ta.text) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、Lua-玩法（对象池-无-GC-UI-兼容）"><a href="#五、Lua-玩法（对象池-无-GC-UI-兼容）" class="headerlink" title="五、Lua 玩法（对象池 + 无 GC + UI 兼容）"></a>五、Lua 玩法（对象池 + 无 GC + UI 兼容）</h2><p><strong><code>Resources/Lua/util.lua.txt</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- File: util.lua</span></span><br><span class="line"><span class="keyword">local</span> TMP_Text = CS.TMPro.TMP_Text</span><br><span class="line"><span class="keyword">local</span> LegacyText = CS.UnityEngine.UI.Text</span><br><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.SetText</span><span class="params">(go, val)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> go <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tmp = go:GetComponent(typeof(TMP_Text))</span><br><span class="line">    <span class="keyword">if</span> tmp <span class="keyword">then</span> tmp.text = <span class="built_in">tostring</span>(val); <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> ui = go:GetComponent(typeof(LegacyText))</span><br><span class="line">    <span class="keyword">if</span> ui  <span class="keyword">then</span> ui.text  = <span class="built_in">tostring</span>(val); <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><p><strong><code>Resources/Lua/flappy_bird.lua.txt</code>（节选）</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- File: flappy_bird.lua</span></span><br><span class="line"><span class="keyword">local</span> U        = <span class="built_in">require</span> <span class="string">&quot;util&quot;</span></span><br><span class="line"><span class="keyword">local</span> UE       = CS.UnityEngine</span><br><span class="line"><span class="keyword">local</span> V3, V2   = UE.Vector3, UE.Vector2</span><br><span class="line"><span class="keyword">local</span> Time     = UE.Time</span><br><span class="line"><span class="keyword">local</span> DOTween  = CS.DG.Tweening.DOTween</span><br><span class="line"></span><br><span class="line"><span class="comment">-- #region 注入对象（由 C# Inspector 提供）</span></span><br><span class="line">Bird = Bird; Spawner = Spawner; prefab = prefab</span><br><span class="line">scoreText = scoreText; playBtn = playBtn; gameOver = gameOver</span><br><span class="line">Background = Background; Ground = Ground</span><br><span class="line">Sprites1, Sprites2, Sprites3 = Sprites1, Sprites2, Sprites3</span><br><span class="line"><span class="comment">-- #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- #region 运行数据（局部缓存，减少分配）</span></span><br><span class="line"><span class="keyword">local</span> spriteIndex, sprites = <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> direction = V3.zero</span><br><span class="line"><span class="keyword">local</span> gravity, strength = <span class="number">-9.8</span>, <span class="number">5.0</span></span><br><span class="line"><span class="keyword">local</span> animBg, animGround = <span class="number">0.05</span>, <span class="number">1.0</span></span><br><span class="line"><span class="keyword">local</span> spawnRate, minH, maxH = <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">2.0</span></span><br><span class="line"><span class="keyword">local</span> speed, leftEdge = <span class="number">5.0</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> cached, score = &#123;&#125;, <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> clicked, isOver = <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line"><span class="keyword">local</span> sr, mrBg, mrG = <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> seqAnim, seqSpawn = <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Awake</span><span class="params">()</span></span> clicked = <span class="literal">false</span>; Pause() <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Start</span><span class="params">()</span></span> leftEdge = UE.Camera.main:ScreenToWorldPoint(V3.zero).x - <span class="number">1.0</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnEnable</span><span class="params">()</span></span></span><br><span class="line">    sr   = Bird:GetComponent(<span class="string">&#x27;SpriteRenderer&#x27;</span>)</span><br><span class="line">    mrBg = Background:GetComponent(<span class="string">&#x27;MeshRenderer&#x27;</span>)</span><br><span class="line">    mrG  = Ground:GetComponent(<span class="string">&#x27;MeshRenderer&#x27;</span>)</span><br><span class="line">    sprites = &#123;Sprites1, Sprites2, Sprites3&#125;</span><br><span class="line">    RegisterButton(playBtn, PlayGame)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> clicked <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">input</span> = UE.Input</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>.GetKeyDown(UE.KeyCode.Space) <span class="keyword">or</span> <span class="built_in">input</span>.GetMouseButtonDown(<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">        direction = V3.up * strength</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>.touchCount &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> t = <span class="built_in">input</span>.GetTouch(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> t.phase == UE.TouchPhase.Began <span class="keyword">then</span> direction = V3.up * strength <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    direction.y = direction.y + gravity * Time.deltaTime</span><br><span class="line">    Bird.transform.position = Bird.transform.position + direction * Time.deltaTime</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mrBg <span class="keyword">then</span> <span class="keyword">local</span> m = mrBg.material; m.mainTextureOffset = m.mainTextureOffset + V2(animBg * Time.deltaTime, <span class="number">0</span>) <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> mrG  <span class="keyword">then</span> <span class="keyword">local</span> m = mrG.material;  m.mainTextureOffset = m.mainTextureOffset  + V2(animGround * Time.deltaTime, <span class="number">0</span>) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #cached <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> it = cached[i]</span><br><span class="line">        <span class="keyword">if</span> it.gameObject.activeSelf <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> tf = it.gameObject.transform</span><br><span class="line">            tf.position = tf.position + V3.left * speed * Time.deltaTime</span><br><span class="line"></span><br><span class="line">            <span class="keyword">local</span> x = tf.position.x</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">-0.1</span> <span class="keyword">and</span> x &lt; <span class="number">0.1</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">local</span> y, top, bot = Bird.transform.position.y, it.scorezone.position.y + <span class="number">1.0</span>, it.scorezone.position.y - <span class="number">1.0</span></span><br><span class="line">                <span class="keyword">if</span> y &gt; bot <span class="keyword">and</span> y &lt; top <span class="keyword">then</span> IncreaseScore()</span><br><span class="line">                <span class="keyword">elseif</span> <span class="keyword">not</span> isOver <span class="keyword">then</span> isOver = <span class="literal">true</span>; <span class="keyword">if</span> seqSpawn <span class="keyword">then</span> seqSpawn:Kill() <span class="keyword">end</span>; GameOver() <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> tf.position.x &lt; leftEdge <span class="keyword">then</span> it.gameObject:SetActive(<span class="literal">false</span>) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Cache</span><span class="params">(go)</span></span></span><br><span class="line">    <span class="keyword">local</span> t = go.transform</span><br><span class="line">    <span class="keyword">return</span> &#123; gameObject = go, top = t:Find(<span class="string">&#x27;Top Pipe&#x27;</span>), bottom = t:Find(<span class="string">&#x27;Bottom Pipe&#x27;</span>), scorezone = t:Find(<span class="string">&#x27;Scoring Zone&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Rent</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #cached <span class="keyword">do</span> <span class="keyword">if</span> <span class="keyword">not</span> cached[i].gameObject.activeSelf <span class="keyword">then</span> <span class="keyword">return</span> cached[i] <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Spawn</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> node = Rent()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> go = UE.GameObject.Instantiate(prefab, Spawner.transform.position, UE.Quaternion.identity)</span><br><span class="line">        go.transform.position = go.transform.position + V3.up * <span class="built_in">math</span>.<span class="built_in">random</span>(minH, maxH)</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(cached, Cache(go))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">local</span> tf = node.gameObject.transform</span><br><span class="line">        tf.position = Spawner.transform.position + V3.up * <span class="built_in">math</span>.<span class="built_in">random</span>(minH, maxH)</span><br><span class="line">        node.gameObject:SetActive(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">AnimateSprite</span><span class="params">()</span></span></span><br><span class="line">    spriteIndex = spriteIndex + <span class="number">1</span>; <span class="keyword">if</span> spriteIndex &gt; #sprites <span class="keyword">then</span> spriteIndex = <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line">    sr.sprite = sprites[spriteIndex]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PlayGame</span><span class="params">()</span></span></span><br><span class="line">    isOver, clicked, score = <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">0</span></span><br><span class="line">    U.SetText(scoreText, score)</span><br><span class="line">    playBtn.gameObject:SetActive(<span class="literal">false</span>); gameOver:SetActive(<span class="literal">false</span>)</span><br><span class="line">    UE.Time.timeScale = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span> Spawn() <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #cached <span class="keyword">do</span> cached[i].gameObject:SetActive(<span class="literal">false</span>) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> seqAnim  <span class="keyword">then</span> seqAnim:Kill()  <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> seqSpawn <span class="keyword">then</span> seqSpawn:Kill() <span class="keyword">end</span></span><br><span class="line">    seqAnim  = DOTween.Sequence():AppendCallback(AnimateSprite):AppendInterval(<span class="number">0.15</span>):SetLoops(<span class="number">-1</span>)</span><br><span class="line">    seqSpawn = DOTween.Sequence():AppendCallback(Spawn):AppendInterval(spawnRate):SetLoops(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GameOver</span><span class="params">()</span></span> playBtn.gameObject:SetActive(<span class="literal">true</span>); gameOver:SetActive(<span class="literal">true</span>); Pause(); clicked = <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pause</span><span class="params">()</span></span>    UE.Time.timeScale = <span class="number">0.0</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IncreaseScore</span><span class="params">()</span></span> score = score + <span class="number">1</span>; U.SetText(scoreText, score) <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RegisterButton</span><span class="params">(btn, fn)</span></span> btn.onClick:AddListener(fn) <span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="六、Addressables-远程-Loader（可替换-Resources）"><a href="#六、Addressables-远程-Loader（可替换-Resources）" class="headerlink" title="六、Addressables 远程 Loader（可替换 Resources）"></a>六、Addressables 远程 Loader（可替换 Resources）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: AddressablesLuaLoader.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.AddressableAssets;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.ResourceManagement.AsyncOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AddressablesLuaLoader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Load</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> key = <span class="string">$&quot;lua/<span class="subst">&#123;fileName&#125;</span>.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> h = Addressables.LoadAssetAsync&lt;TextAsset&gt;(key);</span><br><span class="line">        h.WaitForCompletion();</span><br><span class="line">        <span class="keyword">var</span> ta = h.Status == AsyncOperationStatus.Succeeded ? h.Result : <span class="literal">null</span>;</span><br><span class="line">        Addressables.Release(h);</span><br><span class="line">        <span class="keyword">return</span> ta ? Encoding.UTF8.GetBytes(ta.text) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>WidgetLuaBehaviour.Awake()</code> 中使用：<code>Env.AddLoader(AddressablesLuaLoader.Load)</code>。</p><hr><h2 id="七、IL2CPP-AOT-剪裁保活"><a href="#七、IL2CPP-AOT-剪裁保活" class="headerlink" title="七、IL2CPP &#x2F; AOT 剪裁保活"></a>七、IL2CPP &#x2F; AOT 剪裁保活</h2><p><strong><code>Runtime/Lua/GenConfig.cs</code></strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> DG.Tweening;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">GenConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">LuaCallCSharp</span>] <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; LuaCallCSharp = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typeof</span>(GameObject), <span class="keyword">typeof</span>(Transform), <span class="keyword">typeof</span>(Time), <span class="keyword">typeof</span>(Debug),</span><br><span class="line">        <span class="keyword">typeof</span>(TMPro.TextMeshProUGUI), <span class="keyword">typeof</span>(TMPro.TextMeshPro),</span><br><span class="line">        <span class="keyword">typeof</span>(Sequence), <span class="keyword">typeof</span>(Tween), <span class="keyword">typeof</span>(Tweener), <span class="keyword">typeof</span>(DOVirtual)</span><br><span class="line">    &#125;;</span><br><span class="line">    [<span class="meta">CSharpCallLua</span>] <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; CSharpCallLua = <span class="keyword">new</span>() &#123; <span class="keyword">typeof</span>(Action) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Runtime/Lua/link.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linker</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine.GameObject&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine.Transform&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine.Time&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;Unity.TextMeshPro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;TMPro.TextMeshProUGUI&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;TMPro.TextMeshPro&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;DOTween&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.Sequence&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.Tween&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.Tweener&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.DOVirtual&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;XLua&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linker</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="八、落地步骤（复制即做）"><a href="#八、落地步骤（复制即做）" class="headerlink" title="八、落地步骤（复制即做）"></a>八、落地步骤（复制即做）</h2><ol><li>场景创建 <strong>LuaRunner</strong>，挂 <code>WidgetLuaBehaviour</code>。</li><li>在 <code>Injections</code> 注入：<code>Bird</code>（SpriteRenderer+Collider2D）、<code>Spawner</code>、<code>prefab</code>（含 <code>Top/Bottom/Scoring Zone</code>）、<code>scoreText</code>（TMP 或 Text）、<code>playBtn</code>、<code>gameOver</code>、<code>Background/Ground</code>（MeshRenderer）、<code>Sprites1/2/3</code>。</li><li>放置 <code>flappy_bird.lua.txt</code>、<code>util.lua.txt</code> 到 <code>Resources/Lua/</code>。</li><li>运行：点击 <strong>Play</strong>，空格&#x2F;鼠标&#x2F;触摸控制小鸟。</li><li>（可选）切 Addressables Loader，实现脚本远程热更。</li></ol><hr><h2 id="九、性能要点与排错表"><a href="#九、性能要点与排错表" class="headerlink" title="九、性能要点与排错表"></a>九、性能要点与排错表</h2><ul><li><strong>对象池</strong>：只 <code>SetActive</code> 与位置重置；<strong>首帧预热 5~10</strong> 组元素避免卡顿。</li><li><strong>无 GC</strong>：跨语言类型&#x2F;字符串局部缓存；Update 避免临时表；<strong>Sequence</strong> 替协程。</li><li><strong>GC Tick</strong>：<code>luaEnv.Tick()</code> 默认 1 秒一次足够。</li><li><strong>判定窗口</strong>：仅在 <code>x≈0</code> 的窄窗口做计分&#x2F;死亡判定。</li><li><strong>UI 兼容</strong>：统一 <code>util.SetText</code>，优先 TMP→Text 回落。</li></ul><table><thead><tr><th>现象</th><th>可能原因</th><th>快速处理</th></tr></thead><tbody><tr><td><code>NullReferenceException: TMP_Text</code></td><td>传入的是 <code>Text</code> 或未注入</td><td>已做 TMP→Text 回落；若仍 NRE，多半 <code>scoreText</code> 未注入</td></tr><tr><td>Lua <code>attempt to index nil</code></td><td>注入名不一致 &#x2F; 未注入</td><td>对照 <code>Injection.name</code> 与 Lua 变量名</td></tr><tr><td>DOTween 序列不执行</td><td>未导入&#x2F;未初始化</td><td>导入 DOTween；运行 Utility Panel 生成链接</td></tr><tr><td>移动端触摸无效</td><td>无 <code>EventSystem</code></td><td>在 Canvas 下添加 EventSystem</td></tr><tr><td>首波卡顿</td><td>首次 Instantiate</td><td>对象池<strong>预热</strong>或延迟首波生成</td></tr><tr><td>IL2CPP 崩溃&#x2F;丢类型</td><td>剪裁导致</td><td>按 <code>GenConfig.cs</code> + <code>link.xml</code> 保活</td></tr></tbody></table><hr><h2 id="十、可扩展路线"><a href="#十、可扩展路线" class="headerlink" title="十、可扩展路线"></a>十、可扩展路线</h2><ul><li><strong>难度曲线</strong>：分数↑ → <code>spawnRate</code>↓、<code>speed</code>↑（线性&#x2F;指数&#x2F;阶梯）。</li><li><strong>皮肤系统</strong>：小鸟帧图&#x2F;背景材质抽成 <code>ScriptableObject</code> 或远程配置。</li><li><strong>音效</strong>：点击&#x2F;得分&#x2F;死亡接入 <code>AudioMixer</code>；Lua 切换音效无需重打包。</li><li><strong>存档 &amp; 排行</strong>：本地 JSON（<code>persistentDataPath</code>）&#x2F; 第三方 Leaderboard。</li><li><strong>远程热更</strong>：脚本文本加签名校验、增量下载、版本回滚。</li><li><strong>关卡编辑</strong>：固定序列 + 随机扰动的混合生成表。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> Unity </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xLua </tag>
            
            <tag> 热更新 </tag>
            
            <tag> Object Pool </tag>
            
            <tag> 无GC </tag>
            
            <tag> DOTween </tag>
            
            <tag> TMP </tag>
            
            <tag> IL2CPP </tag>
            
            <tag> Addressables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua &amp; xLua 语法教学（Unity向）</title>
      <link href="/2025/07/22/Lua%20&amp;%20xLua%20%E8%AF%AD%E6%B3%95%E6%95%99%E5%AD%A6%EF%BC%88Unity%E5%90%91%EF%BC%89/"/>
      <url>/2025/07/22/Lua%20&amp;%20xLua%20%E8%AF%AD%E6%B3%95%E6%95%99%E5%AD%A6%EF%BC%88Unity%E5%90%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标：一篇文吃透 <strong>Lua 语法</strong> 与 <strong>xLua 互操作语法</strong>。不聊工程目录，只聊概念 + 语法 + 可直接运行的片段。</p></blockquote><span id="more"></span><h2 id="0-速览：Lua-的“七件套”"><a href="#0-速览：Lua-的“七件套”" class="headerlink" title="0. 速览：Lua 的“七件套”"></a>0. 速览：Lua 的“七件套”</h2><ul><li>基础类型：<code>nil / boolean / number / string / table / function / thread（协程）</code>（还有 <code>userdata</code>，在 xLua 中常见于 C# 对象）</li><li>三类运算：算术 <code>+ - * / % // ^</code>、比较 <code>== ~= &lt; &gt; &lt;= &gt;=</code>、逻辑 <code>and or not</code></li><li>两个“黑魔法”：<strong>表（table）<strong>与</strong>元表（metatable）</strong><br>表是一切组合数据的容器；元表让你给表（或 userdata）定制运算与访问规则。</li></ul><hr><h2 id="1-变量、作用域与表达式"><a href="#1-变量、作用域与表达式" class="headerlink" title="1. 变量、作用域与表达式"></a>1. 变量、作用域与表达式</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 变量与作用域</span></span><br><span class="line"><span class="keyword">local</span> x = <span class="number">10</span>                    <span class="comment">-- local：局部变量（推荐默认都用 local）</span></span><br><span class="line">y = <span class="number">20</span>                          <span class="comment">-- 无 local：全局变量（容易污染命名空间，不推荐）</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> x = <span class="number">99</span>                  <span class="comment">-- 块级作用域：do ... end 内部的 x 与外部不同</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;inner x&quot;</span>, x)           <span class="comment">-- 99</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;outer x&quot;</span>, x)             <span class="comment">-- 10</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 数字与字符串</span></span><br><span class="line"><span class="keyword">local</span> a, b = <span class="number">7</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a / b)                    <span class="comment">-- 浮点除法 2.333...</span></span><br><span class="line"><span class="built_in">print</span>(a // b)                   <span class="comment">-- 整除 2</span></span><br><span class="line"><span class="built_in">print</span>(a % b)                    <span class="comment">-- 取模 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ^ <span class="number">3</span>)                    <span class="comment">-- 次方 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> s = <span class="string">&quot;Lua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi &quot;</span> .. s)               <span class="comment">-- 字符串拼接用 ..</span></span><br><span class="line"><span class="built_in">print</span>(#s)                       <span class="comment">-- 字符串长度（对表是“长度运算符”，见后文）</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 多重赋值与交换</span></span><br><span class="line"><span class="keyword">local</span> i, j = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">i, j = j, i                     <span class="comment">-- 交换变量</span></span><br><span class="line"><span class="built_in">print</span>(i, j)                     <span class="comment">-- 2 1</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-函数、闭包与可变参数"><a href="#2-函数、闭包与可变参数" class="headerlink" title="2. 函数、闭包与可变参数"></a>2. 函数、闭包与可变参数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 函数基础</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x, y)</span></span>        <span class="comment">-- 定义函数（local 防止泄露到全局）</span></span><br><span class="line">  <span class="keyword">return</span> x + y                  <span class="comment">-- Lua 支持多返回值：return a, b, c</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">4</span>))                <span class="comment">-- 7</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 闭包（捕获外部变量）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span><span class="params">()</span></span>    <span class="comment">-- 工厂函数</span></span><br><span class="line">  <span class="keyword">local</span> n = <span class="number">0</span>                   <span class="comment">-- 被捕获的“上值”（upvalue）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>             <span class="comment">-- 返回匿名函数</span></span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> nextId = makeCounter()</span><br><span class="line"><span class="built_in">print</span>(nextId(), nextId())       <span class="comment">-- 1 2（状态被函数记住）</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 可变参数 ...</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(...)</span></span>         <span class="comment">-- ... 接收任意数量实参</span></span><br><span class="line">  <span class="keyword">local</span> total = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;...&#125;) <span class="keyword">do</span>  <span class="comment">-- 把 ... 收集到新表再遍历（简单直观）</span></span><br><span class="line">    total = total + v</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))             <span class="comment">-- 10</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 冒号语法糖（面向对象风格）</span></span><br><span class="line"><span class="keyword">local</span> Player = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player.say</span><span class="params">(self, msg)</span></span>  <span class="comment">-- 点语法：需要手动传 self</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">self</span>.name .. <span class="string">&quot;: &quot;</span> .. msg)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player:say2</span><span class="params">(msg)</span></span>       <span class="comment">-- 冒号语法：定义时自动加 self 参数</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">self</span>.name .. <span class="string">&quot;: &quot;</span> .. msg)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> p = &#123;name = <span class="string">&quot;Lee&quot;</span>&#125;</span><br><span class="line">Player.say(p, <span class="string">&quot;hello&quot;</span>)          <span class="comment">-- 等价</span></span><br><span class="line">p: say2(<span class="string">&quot;hi&quot;</span>)                   <span class="comment">-- 等价于 Player.say2(p, &quot;hi&quot;)</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-表（Table）最重要：从入门到专家"><a href="#3-表（Table）最重要：从入门到专家" class="headerlink" title="3. 表（Table）最重要：从入门到专家"></a>3. <strong>表（Table）最重要：从入门到专家</strong></h2><h3 id="3-1-构造、读写与删除"><a href="#3-1-构造、读写与删除" class="headerlink" title="3.1 构造、读写与删除"></a>3.1 构造、读写与删除</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 构造器（数组式 + 字典式可混用）</span></span><br><span class="line"><span class="keyword">local</span> arr  = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;                 <span class="comment">-- “数组式”下标从 1 开始</span></span><br><span class="line"><span class="keyword">local</span> dict = &#123;x = <span class="number">1</span>, y = <span class="number">2</span>&#125;               <span class="comment">-- “字典式”键是字符串</span></span><br><span class="line"><span class="keyword">local</span> mix  = &#123;<span class="number">100</span>, a = <span class="number">5</span>, [<span class="string">&quot;weird-key&quot;</span>] = <span class="number">7</span>, [<span class="literal">true</span>] = <span class="string">&quot;ok&quot;</span>&#125; <span class="comment">-- 任意键</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 访问与修改</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>], arr[<span class="number">2</span>])                     <span class="comment">-- 10 20</span></span><br><span class="line"><span class="built_in">print</span>(dict.x, dict[<span class="string">&quot;y&quot;</span>])                  <span class="comment">-- 1  2（t.k 等价 t[&quot;k&quot;]）</span></span><br><span class="line">mix[<span class="string">&quot;weird-key&quot;</span>] = <span class="number">8</span>                      <span class="comment">-- 修改</span></span><br><span class="line">dict.z = <span class="number">3</span>                                <span class="comment">-- 新增键</span></span><br><span class="line">dict.x = <span class="literal">nil</span>                              <span class="comment">-- 删除键：设为 nil 即删除</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-2-遍历与长度"><a href="#3-2-遍历与长度" class="headerlink" title="3.2 遍历与长度"></a>3.2 遍历与长度</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 遍历</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span>                <span class="comment">-- ipairs：连续整数键 1..n，遇到第一个 nil 停</span></span><br><span class="line">  <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(mix) <span class="keyword">do</span>                 <span class="comment">-- pairs：遍历所有键（无序，不保证顺序稳定）</span></span><br><span class="line">  <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 长度运算符 #</span></span><br><span class="line"><span class="keyword">local</span> t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)                                 <span class="comment">-- 3</span></span><br><span class="line">t[<span class="number">4</span>] = <span class="literal">nil</span>                                <span class="comment">-- “洞”会影响 # 运算</span></span><br><span class="line"><span class="built_in">print</span>(#t)                                 <span class="comment">-- 未定义行为（可能仍是 3，也可能 2）——不要依赖</span></span><br><span class="line"><span class="comment">-- 正解：自己维护长度或用 table.move/table.insert/remove 管理</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-3-常用库函数（table）"><a href="#3-3-常用库函数（table）" class="headerlink" title="3.3 常用库函数（table）"></a>3.3 常用库函数（<code>table</code>）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 插入/删除/拼接/排序/打包</span></span><br><span class="line"><span class="keyword">local</span> t = &#123; <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span> &#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t, <span class="number">1</span>, <span class="string">&quot;z&quot;</span>)                   <span class="comment">-- 在索引 1 插入 &quot;z&quot;：&#123;&quot;z&quot;,&quot;b&quot;,&quot;a&quot;,&quot;c&quot;&#125;</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(t, <span class="number">2</span>)                         <span class="comment">-- 删除索引 2：&#123;&quot;z&quot;,&quot;a&quot;,&quot;c&quot;&#125;</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(t, <span class="function"><span class="keyword">function</span><span class="params">(lhs, rhs)</span></span>          <span class="comment">-- 自定义排序（按字母升序）</span></span><br><span class="line">  <span class="keyword">return</span> lhs &lt; rhs</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">concat</span>(t, <span class="string">&quot;,&quot;</span>))               <span class="comment">-- &quot;a,c,z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> packed = <span class="built_in">table</span>.pack(<span class="number">1</span>, <span class="literal">nil</span>, <span class="number">3</span>)      <span class="comment">-- &#123;1,nil,3&#125;; packed.n=3 可保存长度包括 nil</span></span><br><span class="line"><span class="keyword">local</span> a, b, c = <span class="built_in">table</span>.<span class="built_in">unpack</span>(&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;)     <span class="comment">-- 解包</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-4-引用语义、浅拷贝与深拷贝"><a href="#3-4-引用语义、浅拷贝与深拷贝" class="headerlink" title="3.4 引用语义、浅拷贝与深拷贝"></a>3.4 引用语义、浅拷贝与深拷贝</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 引用语义</span></span><br><span class="line"><span class="keyword">local</span> t1 = &#123;a=<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">local</span> t2 = t1                  <span class="comment">-- 赋值只是“指向同一张表”</span></span><br><span class="line">t2.a = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(t1.a)                    <span class="comment">-- 9</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 浅拷贝</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">shallow_copy</span><span class="params">(src)</span></span></span><br><span class="line">  <span class="keyword">local</span> dst = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(src) <span class="keyword">do</span></span><br><span class="line">    dst[k] = v                 <span class="comment">-- 仅复制第一层，嵌套表仍是“同一个引用”</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> dst</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 深拷贝（带环检测）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">deep_copy</span><span class="params">(src, seen)</span></span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span>(src) ~= <span class="string">&quot;table&quot;</span> <span class="keyword">then</span> <span class="keyword">return</span> src <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> seen <span class="keyword">and</span> seen[src] <span class="keyword">then</span> <span class="keyword">return</span> seen[src] <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> dst = &#123;&#125;</span><br><span class="line">  seen = seen <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  seen[src] = dst</span><br><span class="line">  <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(src) <span class="keyword">do</span></span><br><span class="line">    dst[deep_copy(k, seen)] = deep_copy(v, seen)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment">-- 可选：拷贝元表</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(dst, <span class="built_in">getmetatable</span>(src))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-5-rawget-rawset-与只读表、带默认值表"><a href="#3-5-rawget-rawset-与只读表、带默认值表" class="headerlink" title="3.5 rawget/rawset 与只读表、带默认值表"></a>3.5 <code>rawget/rawset</code> 与<strong>只读表</strong>、<strong>带默认值表</strong></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region rawget/rawset：绕过元表的“钩子”直接读写底层存储</span></span><br><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> mt = &#123;</span><br><span class="line">  <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="number">42</span> <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(t, mt)</span><br><span class="line"><span class="built_in">print</span>(t.someKey)               <span class="comment">-- 42（触发 __index）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">rawget</span>(t, <span class="string">&quot;someKey&quot;</span>))    <span class="comment">-- nil（不触发 __index，读到真实存储）</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 只读表（访问 OK，写入报错）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">readonly</span><span class="params">(tbl)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = tbl,             <span class="comment">-- 读：转发到原表</span></span><br><span class="line">    <span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">error</span>(<span class="string">&quot;table is readonly&quot;</span>) <span class="keyword">end</span>, <span class="comment">-- 写：报错</span></span><br><span class="line">    __pairs = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">pairs</span>(tbl) <span class="keyword">end</span>,             <span class="comment">-- 遍历：透传</span></span><br><span class="line">    <span class="built_in">__len</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> #tbl <span class="keyword">end</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 默认值表（访问不存在键时返回默认）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">with_default</span><span class="params">(defaultValue)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, _)</span></span> <span class="keyword">return</span> defaultValue <span class="keyword">end</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> bag = with_default(<span class="number">0</span>)</span><br><span class="line">bag.apple = bag.apple + <span class="number">1</span>      <span class="comment">-- 读不到时当 0</span></span><br><span class="line"><span class="built_in">print</span>(bag.apple)               <span class="comment">-- 1</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-6-元表（Metatable）与“像类一样用表”"><a href="#3-6-元表（Metatable）与“像类一样用表”" class="headerlink" title="3.6 元表（Metatable）与“像类一样用表”"></a>3.6 元表（Metatable）与“像类一样用表”</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 运算符重载与属性“魔法”</span></span><br><span class="line"><span class="keyword">local</span> vec = &#123;x=<span class="number">1</span>, y=<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br><span class="line">mt.<span class="built_in">__add</span> = <span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span> <span class="keyword">return</span> &#123;x=a.x+b.x, y=a.y+b.y&#125; <span class="keyword">end</span>   <span class="comment">-- 重载 +</span></span><br><span class="line">mt.<span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span> <span class="keyword">return</span> (<span class="string">&quot;(%d,%d)&quot;</span>):<span class="built_in">format</span>(v.x,v.y) <span class="keyword">end</span></span><br><span class="line">mt.<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t,k)</span></span></span><br><span class="line">  <span class="keyword">if</span> k == <span class="string">&quot;len&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">math</span>.<span class="built_in">sqrt</span>(t.x*t.x + t.y*t.y)                      <span class="comment">-- 惰性“属性”</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">setmetatable</span>(vec, mt)</span><br><span class="line"><span class="built_in">print</span>(vec + &#123;x=<span class="number">3</span>,y=<span class="number">4</span>&#125;)  <span class="comment">-- (4,6)</span></span><br><span class="line"><span class="built_in">print</span>(vec.<span class="built_in">len</span>)          <span class="comment">-- 2.236...</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region “类风格”构造与方法</span></span><br><span class="line"><span class="keyword">local</span> Class = &#123;&#125;                          <span class="comment">-- 类表（方法定义在它上面）</span></span><br><span class="line">Class.<span class="built_in">__index</span> = Class                     <span class="comment">-- 实例查不到键时从 Class 上找（方法）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:new</span><span class="params">(name)</span></span>                  <span class="comment">-- 构造器</span></span><br><span class="line">  <span class="keyword">local</span> o = &#123;name = name&#125;                 <span class="comment">-- 实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(o, Class)           <span class="comment">-- 绑定元表</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:say</span><span class="params">(msg)</span></span>                   <span class="comment">-- 方法</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">self</span>.name .. <span class="string">&quot;: &quot;</span> .. msg)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> c = Class:new(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">c:say(<span class="string">&quot;yo&quot;</span>)                               <span class="comment">-- Alice: yo</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 弱表（缓存与对象池）：__mode = &quot;k&quot; / &quot;v&quot; / &quot;kv&quot;</span></span><br><span class="line"><span class="keyword">local</span> cache = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__mode</span>=<span class="string">&quot;v&quot;</span>&#125;) <span class="comment">-- 值是弱引用，被外部释放后会被 GC 回收</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-字符串与模式匹配（正则替代品）"><a href="#4-字符串与模式匹配（正则替代品）" class="headerlink" title="4. 字符串与模式匹配（正则替代品）"></a>4. 字符串与模式匹配（正则替代品）</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 常用 API：sub/find/gsub/format</span></span><br><span class="line"><span class="keyword">local</span> s = <span class="string">&quot;Lua-XLua-Unity&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(s, <span class="number">5</span>, <span class="number">8</span>))                 <span class="comment">-- &quot;XLua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(s, <span class="string">&quot;Unity&quot;</span>))             <span class="comment">-- 起止位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;a,b,c&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>))      <span class="comment">-- &quot;a|b|c&quot;, 次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;pos=(%0.2f,%0.2f)&quot;</span>, <span class="number">1.234</span>, <span class="number">5.678</span>))</span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 模式匹配（不完全等于正则，但够用）</span></span><br><span class="line"><span class="keyword">local</span> text = <span class="string">&quot;id=42 user=lee&quot;</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(text, <span class="string">&quot;(%w+)=(%w+)&quot;</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(k, v)                              <span class="comment">-- id 42 / user lee</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-协程：可暂停的函数"><a href="#5-协程：可暂停的函数" class="headerlink" title="5. 协程：可暂停的函数"></a>5. 协程：可暂停的函数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 生产者-消费者示例</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(i)                   <span class="comment">-- 产出一个值并挂起</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;done&quot;</span>                          <span class="comment">-- 最终返回</span></span><br><span class="line">  <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> co = producer()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true done</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-错误与异常：error-assert-pcall-xpcall"><a href="#6-错误与异常：error-assert-pcall-xpcall" class="headerlink" title="6. 错误与异常：error / assert / pcall / xpcall"></a>6. 错误与异常：<code>error / assert / pcall / xpcall</code></h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region pcall：捕获错误不抛出</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">div</span><span class="params">(a,b)</span></span></span><br><span class="line">  <span class="keyword">if</span> b == <span class="number">0</span> <span class="keyword">then</span> <span class="built_in">error</span>(<span class="string">&quot;divide by zero&quot;</span>) <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> a/b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, res = <span class="built_in">pcall</span>(div, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ok, res)                             <span class="comment">-- false   divide by zero</span></span><br><span class="line"><span class="comment">-- xpcall 可附带 traceback：</span></span><br><span class="line"><span class="keyword">local</span> ok2, res2 = <span class="built_in">xpcall</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> div(<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">end</span>, <span class="built_in">debug</span>.<span class="built_in">traceback</span>)</span><br><span class="line"><span class="built_in">print</span>(ok2, res2)</span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-xLua-语法要点：Lua-↔-C"><a href="#7-xLua-语法要点：Lua-↔-C" class="headerlink" title="7. xLua 语法要点：Lua ↔ C#"></a>7. xLua 语法要点：Lua ↔ C#</h2><blockquote><p>不谈工程目录，只谈 <strong>怎么在 Lua 里“像 C# 那样用类型”</strong> 与 <strong>C# 怎么调用 Lua</strong>。</p></blockquote><h3 id="7-1-在-Lua-里访问-C-（CS-命名空间）"><a href="#7-1-在-Lua-里访问-C-（CS-命名空间）" class="headerlink" title="7.1 在 Lua 里访问 C#（CS 命名空间）"></a>7.1 在 Lua 里访问 C#（<code>CS</code> 命名空间）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region CS 入口（静态/实例/枚举）</span></span><br><span class="line"><span class="keyword">local</span> CS = CS                                     <span class="comment">-- 简写</span></span><br><span class="line">CS.UnityEngine.Debug.Log(<span class="string">&quot;[Lua] hello&quot;</span>)           <span class="comment">-- 静态方法</span></span><br><span class="line"><span class="keyword">local</span> go = CS.UnityEngine.GameObject(<span class="string">&quot;FromLua&quot;</span>)   <span class="comment">-- new GameObject(&quot;FromLua&quot;)</span></span><br><span class="line">go.transform.position = CS.UnityEngine.Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">-- 值类型“整体赋回”（详见 7.3）</span></span><br><span class="line"><span class="keyword">local</span> KeyCode = CS.UnityEngine.KeyCode</span><br><span class="line"><span class="built_in">print</span>(KeyCode.Space)                               <span class="comment">-- 枚举</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 泛型（List / Dictionary）</span></span><br><span class="line"><span class="keyword">local</span> ListInt = CS.System.Collections.Generic.List(CS.System.Int32)    <span class="comment">-- List&lt;int&gt;</span></span><br><span class="line"><span class="keyword">local</span> list = ListInt()                           <span class="comment">-- 构造</span></span><br><span class="line">list:Add(<span class="number">10</span>); list:Add(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(list:get_Count(), list:Contains(<span class="number">10</span>))       <span class="comment">-- 2  true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> DictSF = CS.System.Collections.Generic.Dictionary(CS.System.String, CS.System.Single) <span class="comment">-- Dictionary&lt;string,float&gt;</span></span><br><span class="line"><span class="keyword">local</span> dict = DictSF()</span><br><span class="line">dict:Add(<span class="string">&quot;atk&quot;</span>, <span class="number">12.5</span>)</span><br><span class="line"><span class="built_in">print</span>(dict:get_Item(<span class="string">&quot;atk&quot;</span>))                      <span class="comment">-- 12.5</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 委托/事件（Action/Func）</span></span><br><span class="line"><span class="keyword">local</span> Action = CS.System.Action</span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onQuit</span><span class="params">()</span></span> CS.UnityEngine.Debug.Log(<span class="string">&quot;[Lua] quitting&quot;</span>) <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 订阅 .NET 事件：组合委托（不同类型事件有不同 API，以下是 .NET 风格示例）</span></span><br><span class="line">CS.UnityEngine.Application.quitting = CS.System.Delegate.Combine(</span><br><span class="line">  CS.UnityEngine.Application.quitting,</span><br><span class="line">  Action(onQuit)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 取消订阅：Delegate.Remove(...)</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="7-2-在-C-里调用-Lua（委托-接口映射）"><a href="#7-2-在-C-里调用-Lua（委托-接口映射）" class="headerlink" title="7.2 在 C# 里调用 Lua（委托&#x2F;接口映射）"></a>7.2 在 C# 里调用 Lua（委托&#x2F;接口映射）</h3><blockquote><p>核心思路：<strong>把 Lua 函数“看作” C# 的委托或接口</strong>，这样 C# 端调用更类型安全、开销更低。<br>这需要<strong>白名单 + 代码生成</strong>（<code>[CSharpCallLua]</code> 等），此处仅示意“怎么用”。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> C# 伪代码（重点是“语法”）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Lua 侧：</span></span><br><span class="line"><span class="comment">Demo = &#123;&#125;</span></span><br><span class="line"><span class="comment">function Demo.add(x,y) return x+y end</span></span><br><span class="line"><span class="comment">function Demo.on_click(name) print(name) end</span></span><br><span class="line"><span class="comment">ButtonHandler = &#123; OnClick = function(self, name) print(name) end &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> table = env.Global.Get&lt;LuaTable&gt;(<span class="string">&quot;Demo&quot;</span>);           <span class="comment">// 取到 Lua 表</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">add</span> = table.Get&lt;Func&lt;<span class="built_in">int</span>,<span class="built_in">int</span>,<span class="built_in">int</span>&gt;&gt;(<span class="string">&quot;add&quot;</span>);          <span class="comment">// 把 Lua 函数映射成 C# 委托</span></span><br><span class="line">Debug.Log(<span class="keyword">add</span>(<span class="number">3</span>,<span class="number">4</span>));                                    <span class="comment">// 7</span></span><br><span class="line"><span class="keyword">var</span> onClick = table.Get&lt;Action&lt;<span class="built_in">string</span>&gt;&gt;(<span class="string">&quot;on_click&quot;</span>);    <span class="comment">// 同理</span></span><br><span class="line">onClick(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = env.Global.Get&lt;IButtonHandler&gt;(<span class="string">&quot;ButtonHandler&quot;</span>); <span class="comment">// 把 Lua 表当作接口对象</span></span><br><span class="line">handler.OnClick(<span class="string">&quot;Play&quot;</span>);</span><br><span class="line">table.Dispose();                                        <span class="comment">// 用完记得释放</span></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h3 id="7-3-值类型陷阱（Vector3-等）"><a href="#7-3-值类型陷阱（Vector3-等）" class="headerlink" title="7.3 值类型陷阱（Vector3 等）"></a>7.3 值类型陷阱（<code>Vector3</code> 等）</h3><ul><li><code>Vector3</code>&#x2F;<code>Color</code> 等是 <strong>值类型（struct）</strong>。在 Lua 里读取 <code>go.transform.position</code> 得到的是<strong>值的副本</strong>，<strong>不能直接点改</strong>。<br>正确做法：<strong>改临时变量，再整体赋回</strong>。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> pos = go.transform.position  <span class="comment">-- 取到副本</span></span><br><span class="line">pos.y = pos.y + <span class="number">1</span>                  <span class="comment">-- 修改副本</span></span><br><span class="line">go.transform.position = pos        <span class="comment">-- 整体赋回（这一步才生效）</span></span><br></pre></td></tr></table></figure><h3 id="7-4-数字类型与重载解析"><a href="#7-4-数字类型与重载解析" class="headerlink" title="7.4 数字类型与重载解析"></a>7.4 数字类型与重载解析</h3><ul><li>Lua 的 <code>number</code> 在 xLua 里通常走 <code>double</code>。传给 C# 的 <code>int/float</code> 会自动转换，但<strong>签名重载有歧义</strong>时可能报错。<br>解决：用显式类型构造消歧义，例如 <code>CS.System.Single(1.0)</code>、<code>CS.System.Int32(1)</code>。</li></ul><h3 id="7-5-性能与内存小抄（互操作相关）"><a href="#7-5-性能与内存小抄（互操作相关）" class="headerlink" title="7.5 性能与内存小抄（互操作相关）"></a>7.5 性能与内存小抄（互操作相关）</h3><ul><li>频繁调用的 Lua 函数请 <strong>缓存委托&#x2F;接口</strong>，避免每次 <code>Get&lt;T&gt;</code> 与查表。</li><li><code>LuaTable/LuaFunction</code> 用完 <strong>立刻 <code>Dispose()</code></strong>；否则 Lua GC 无法及时回收。</li><li>跨语言传大对象用 <strong>ID&#x2F;句柄</strong> 替代，另一侧再查询，减少边界拷贝。</li></ul><hr><h2 id="8-常见语法坑位清单（90-的报错都在这）"><a href="#8-常见语法坑位清单（90-的报错都在这）" class="headerlink" title="8. 常见语法坑位清单（90% 的报错都在这）"></a>8. 常见语法坑位清单（90% 的报错都在这）</h2><ol><li><strong><code>attempt to index a nil value</code></strong>：访问了 <code>nil</code>。先 <code>print(type(x))</code> 看是否为 <code>nil</code>。</li><li><strong><code>#</code> 运算对“有洞的数组”不可靠</strong>：不要用 <code>#t</code> 统计带空洞的数组长度。</li><li><strong>结构体属性“点改不生效”</strong>：<code>Vector3</code> 之类要<strong>整体赋回</strong>（见 7.3）。</li><li><strong>委托签名不匹配</strong>：<code>Action&lt;string&gt;</code> 与 Lua 函数的参数个数&#x2F;类型必须一致。</li><li><strong>排序比较器写错返回值</strong>：比较函数应返回 <code>true/false</code>，而不是 <code>-1/0/1</code>。</li></ol><hr><h2 id="9-实战练习（聚焦-Table-与-xLua-语法）"><a href="#9-实战练习（聚焦-Table-与-xLua-语法）" class="headerlink" title="9. 实战练习（聚焦 Table 与 xLua 语法）"></a>9. 实战练习（聚焦 Table 与 xLua 语法）</h2><p><strong>练习 A：实现一个“默认 0 的计数表”</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 练习 A 参考解法（逐行注释）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(t, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, _)</span></span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span>  <span class="comment">-- 读不到键时默认为 0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> c = counter()</span><br><span class="line">c.apple = c.apple + <span class="number">1</span>                       <span class="comment">-- 读不到时返回 0，再 +1</span></span><br><span class="line">c.banana = c.banana + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(c.apple, c.banana)                    <span class="comment">-- 1  2</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><p><strong>练习 B：只读配置表</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 练习 B 参考解法</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">readonly</span><span class="params">(tbl)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = tbl,</span><br><span class="line">    <span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">error</span>(<span class="string">&quot;readonly&quot;</span>) <span class="keyword">end</span>,</span><br><span class="line">    __pairs = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">pairs</span>(tbl) <span class="keyword">end</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> cfg = readonly(&#123;hp=<span class="number">100</span>, atk=<span class="number">20</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(cfg.hp)           <span class="comment">-- 100</span></span><br><span class="line"><span class="comment">-- cfg.hp = 200         -- 报错：readonly</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><p><strong>练习 C（xLua）：用 List<int> 做桥接而不是 Lua 表</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 练习 C 参考解法</span></span><br><span class="line"><span class="keyword">local</span> ListInt = CS.System.Collections.Generic.List(CS.System.Int32)</span><br><span class="line"><span class="keyword">local</span> scores = ListInt()     <span class="comment">-- 避免把 Lua 表传到 C# 再逐一解析，直接用 .NET 容器</span></span><br><span class="line">scores:Add(<span class="number">90</span>); scores:Add(<span class="number">85</span>); scores:Add(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(scores:get_Count())    <span class="comment">-- 3</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><ul><li><strong>表</strong>是 Lua 的心脏：会构造、会遍历、懂“洞”、会用 <code>table.*</code>、会玩元表，你就能写出优雅的 Lua。</li><li><strong>xLua</strong> 语法的核心就三件事：<strong><code>CS</code> 访问 + 泛型&#x2F;委托写法 + 值类型赋回</strong>。</li><li>写法上坚持：<strong>local 默认</strong>、<strong>小函数多闭包</strong>、<strong>边界少拷贝</strong>、<strong>用完就 <code>Dispose()</code></strong>。</li></ul><blockquote><p>想进阶：我可以再写《xLua 白名单进阶（接口&#x2F;泛型&#x2F;事件订阅最佳实践）》与《Lua 元表 Cookbook（__index&#x2F;__newindex&#x2F;__pairs&#x2F;__len&#x2F;__call&#x2F;只读表&#x2F;弱表&#x2F;多重键）》做配套。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
          <category> 教程 </category>
          
          <category> Unity </category>
          
          <category> xLua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xLua </tag>
            
            <tag> Unity </tag>
            
            <tag> Lua </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo · 快速上手</title>
      <link href="/2025/07/03/Hello-Hexo/"/>
      <url>/2025/07/03/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向新手的 <strong>Hexo 操作说明</strong>。只保留最有用的命令与范例，能直接复制粘贴跑起来。</p></blockquote><span id="more"></span><h2 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1) 新建文章"></a>1) 新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一篇普通文章（建议文件名用英文，便于链接与版本管理）</span></span><br><span class="line">hexo new <span class="string">&quot;hello-hexo-quickstart&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可指定类型：post（默认）/ draft / page</span></span><br><span class="line">hexo new post  <span class="string">&quot;my-first-post&quot;</span></span><br><span class="line">hexo new draft <span class="string">&quot;post-draft&quot;</span>        <span class="comment"># 草稿（不会被发布）</span></span><br><span class="line">hexo publish draft <span class="string">&quot;post-draft&quot;</span>    <span class="comment"># 草稿转正式文章</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span>              <span class="comment"># 生成独立页面：/about/</span></span><br></pre></td></tr></table></figure><h2 id="2-本地预览"><a href="#2-本地预览" class="headerlink" title="2) 本地预览"></a>2) 本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动本地服务（默认 http://localhost:4000）</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：自动打开浏览器、指定端口</span></span><br><span class="line">hexo s -o -p 4001</span><br></pre></td></tr></table></figure><blockquote><p>退出预览：在终端按 <code>Ctrl + C</code>。</p></blockquote><h2 id="3-写作：Front-matter（安全模板）"><a href="#3-写作：Front-matter（安全模板）" class="headerlink" title="3) 写作：Front-matter（安全模板）"></a>3) 写作：Front-matter（安全模板）</h2><p>避免 YAML 报错的最小模板——<strong>列表一律用 <code>-</code>，不要多余缩进或反斜杠</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Your</span> <span class="string">Post</span> <span class="string">Title</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">updated:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一句话描述本文内容。</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&quot;#ffffff&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>常见字段说明：</p><ul><li><code>categories</code> &#x2F; <code>tags</code>：都是<strong>列表</strong>（用 <code>-</code>）。</li><li><code>description</code>：摘要文本，很多主题会用于 SEO&#x2F;预览卡片。</li><li>主题自带的 <code>cover</code> &#x2F; <code>top_img</code> 可按需添加；不需要时<strong>直接删掉字段</strong>，不要留空值。</li></ul><h2 id="4-生成静态文件"><a href="#4-生成静态文件" class="headerlink" title="4) 生成静态文件"></a>4) 生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可选：先清理，避免旧缓存导致显示异常</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成到 public/ 目录</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="5-部署到远程（以-GitHub-Pages-为例）"><a href="#5-部署到远程（以-GitHub-Pages-为例）" class="headerlink" title="5) 部署到远程（以 GitHub Pages 为例）"></a>5) 部署到远程（以 GitHub Pages 为例）</h2><h3 id="5-1-安装部署插件（首次）"><a href="#5-1-安装部署插件（首次）" class="headerlink" title="5.1 安装部署插件（首次）"></a>5.1 安装部署插件（首次）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git -D</span><br></pre></td></tr></table></figure><h3 id="5-2-配置-config-yml"><a href="#5-2-配置-config-yml" class="headerlink" title="5.2 配置 _config.yml"></a>5.2 配置 <code>_config.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;your-username&gt;/&lt;your-username&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>   <span class="comment"># 或者 gh-pages，取决于你的仓库设置</span></span><br></pre></td></tr></table></figure><h3 id="5-3-一键生成并部署"><a href="#5-3-一键生成并部署" class="headerlink" title="5.3 一键生成并部署"></a>5.3 一键生成并部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line"><span class="comment"># 或分步：hexo g &amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure><blockquote><p>若仓库开启了自定义域名（<code>CNAME</code>），请确保仓库根目录有正确的 <code>CNAME</code> 文件。</p></blockquote><h2 id="6-命令速查表"><a href="#6-命令速查表" class="headerlink" title="6) 命令速查表"></a>6) 命令速查表</h2><table><thead><tr><th>目的</th><th>命令</th></tr></thead><tbody><tr><td>新建文章</td><td><code>hexo new &quot;My Post&quot;</code></td></tr><tr><td>新建草稿</td><td><code>hexo new draft &quot;My Draft&quot;</code></td></tr><tr><td>草稿转正式</td><td><code>hexo publish draft &quot;My Draft&quot;</code></td></tr><tr><td>本地预览</td><td><code>hexo s</code> &#x2F; <code>hexo s -o -p 4001</code></td></tr><tr><td>清理缓存</td><td><code>hexo clean</code></td></tr><tr><td>生成静态文件</td><td><code>hexo g</code></td></tr><tr><td>部署</td><td><code>hexo d</code> &#x2F; <code>hexo g -d</code></td></tr></tbody></table><h2 id="7-常见问题（快速排查）"><a href="#7-常见问题（快速排查）" class="headerlink" title="7) 常见问题（快速排查）"></a>7) 常见问题（快速排查）</h2><ul><li><strong>YAMLException（前言区解析错误）</strong><br>多半是列表写成了 <code>* 项目</code> 或缩进错位；用上面的“安全模板”重写前言区。</li><li><strong>图片不显示</strong><br>确认图片位于 <code>source/img/</code>，引用用绝对路径：<code>/img/xxx.png</code>。</li><li><strong>部署报错：Deployer not found: git</strong><br>还没装 <code>hexo-deployer-git</code>：执行 <code>npm i hexo-deployer-git -D</code>。</li><li><strong>改了不生效</strong><br>执行 <code>hexo clean &amp;&amp; hexo s</code>，或清除浏览器缓存&#x2F;强刷。</li><li><strong>GitHub Pages 没有更新</strong><br>检查仓库 Actions&#x2F;Pages 状态、分支是否正确、<code>public/</code> 是否包含最新生成内容。</li></ul><h2 id="8-写作小贴士"><a href="#8-写作小贴士" class="headerlink" title="8) 写作小贴士"></a>8) 写作小贴士</h2><ul><li><strong>文件名与链接</strong>：文件名用英文、短横线分词，比如 <code>lua-xlua-syntax-tutorial.md</code>。</li><li><strong>代码高亮</strong>：代码块使用三反引号并指定语言，如 <code><code>bash&lt;/code&gt; / &lt;code&gt;</code>js</code>。</li><li><strong>长文章导航</strong>：开启 <code>toc: true</code> 与 <code>toc_number: true</code>，目录更清晰。</li><li><strong>更新日期</strong>：不想维护 <code>updated</code> 时可以删掉该字段，避免重复改动。</li></ul><hr><p>这篇就是一份<strong>可直接发布</strong>的 Hexo 使用说明。继续扩展的话，可以再写一篇「主题个性化与导航配置」或「GitHub Pages + Cloudflare 的域名与加速实践」，把站点体验拉满。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 快速上手 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
