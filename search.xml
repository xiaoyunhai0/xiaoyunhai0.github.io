<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git Push&amp;Pull 使用 SSH（含 443 端口）配置</title>
      <link href="/2025/08/22/Git%E4%BD%BF%E7%94%A8SSH%E7%9A%84Push%E5%92%8CPull/"/>
      <url>/2025/08/22/Git%E4%BD%BF%E7%94%A8SSH%E7%9A%84Push%E5%92%8CPull/</url>
      
        <content type="html"><![CDATA[<blockquote><p>适用系统：Windows 10&#x2F;11（内置 OpenSSH）。<br>目标：<strong>完全摆脱代理</strong>，让 Git 走 SSH；若 22 端口被封，改走 <strong>ssh.github.com:443</strong>。</p></blockquote><hr><h2 id="一、HTTPS-vs-SSH：为什么要改用-SSH？"><a href="#一、HTTPS-vs-SSH：为什么要改用-SSH？" class="headerlink" title="一、HTTPS vs SSH：为什么要改用 SSH？"></a>一、HTTPS vs SSH：为什么要改用 SSH？</h2><ul><li><strong>HTTPS</strong>：简单，但在受限网络下常被拦（443 直连也可能被深度检查），且需要凭证管理器或 PAT。  </li><li><strong>SSH</strong>：更稳，可用 <code>ssh.github.com:443</code> 绕过 22 封锁；配好一次，所有仓库免输密码。</li></ul><hr><h2 id="二、清理任何“代理残留”（极重要）"><a href="#二、清理任何“代理残留”（极重要）" class="headerlink" title="二、清理任何“代理残留”（极重要）"></a>二、清理任何“代理残留”（极重要）</h2><p>很多人 Git 连不通，其实是还在走 <code>127.0.0.1:7890/57890</code> 的<strong>HTTP&#x2F;SOCKS 代理</strong>。先清空：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy    &amp; <span class="built_in">rem</span> 取消全局 HTTP 代理</span><br><span class="line">git config --global --unset https.proxy   &amp; <span class="built_in">rem</span> 取消全局 HTTPS 代理</span><br><span class="line">git config --unset http.proxy             &amp; <span class="built_in">rem</span> 在仓库目录里，取消本仓库 HTTP 代理</span><br><span class="line">git config --unset https.proxy            &amp; <span class="built_in">rem</span> 在仓库目录里，取消本仓库 HTTPS 代理</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">&gt; VS Code 里也要清空：**Settings → 搜索 proxy → Http: Proxy** 留空并重启 VS Code。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 三、准备 SSH 密钥（有就复用）</span><br><span class="line"></span><br><span class="line">### <span class="number">3</span>.<span class="number">1</span> 检查是否已有密钥</span><br><span class="line"></span><br><span class="line">```<span class="built_in">cmd</span></span><br><span class="line"><span class="built_in">dir</span> <span class="variable">%USERPROFILE%</span>\.ssh                 &amp; <span class="built_in">rem</span> 查看是否已有 id_rsa / id_ed25519</span><br><span class="line"><span class="built_in">type</span> <span class="variable">%USERPROFILE%</span>\.ssh\id_rsa.pub     &amp; <span class="built_in">rem</span> 若存在，打印公钥内容以便复制</span><br></pre></td></tr></table></figure><h3 id="3-2-如无则新建（推荐-Ed25519）"><a href="#3-2-如无则新建（推荐-Ed25519）" class="headerlink" title="3.2 如无则新建（推荐 Ed25519）"></a>3.2 如无则新建（推荐 Ed25519）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;你的邮箱&quot;    &amp; <span class="built_in">rem</span> 按回车使用默认路径 ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure><hr><h2 id="四、启动-ssh-agent-并加载私钥（Windows）"><a href="#四、启动-ssh-agent-并加载私钥（Windows）" class="headerlink" title="四、启动 ssh-agent 并加载私钥（Windows）"></a>四、启动 ssh-agent 并加载私钥（Windows）</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc config ssh-agent <span class="built_in">start</span>=auto         &amp; <span class="built_in">rem</span> 将 OpenSSH 代理设为开机自启（只需一次）</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> ssh-agent                    &amp; <span class="built_in">rem</span> 启动代理服务（已启动会提示“已在运行”）</span><br><span class="line">ssh-add <span class="variable">%USERPROFILE%</span>\.ssh\id_rsa      &amp; <span class="built_in">rem</span> 加载私钥到 agent；若用 ed25519 改文件名</span><br><span class="line">ssh-add -l                             &amp; <span class="built_in">rem</span> 列出已加载的密钥，确认成功</span><br></pre></td></tr></table></figure><hr><h2 id="五、把公钥添加到-GitHub"><a href="#五、把公钥添加到-GitHub" class="headerlink" title="五、把公钥添加到 GitHub"></a>五、把公钥添加到 GitHub</h2><ol><li>复制公钥内容：<code>type %USERPROFILE%\.ssh\id_rsa.pub</code>（或 <code>id_ed25519.pub</code>）。</li><li>GitHub → <strong>Settings → SSH and GPG keys → New SSH key</strong> → 粘贴保存。</li></ol><hr><h2 id="六、端口-22-被封怎么办？——走-ssh-github-com-443"><a href="#六、端口-22-被封怎么办？——走-ssh-github-com-443" class="headerlink" title="六、端口 22 被封怎么办？——走 ssh.github.com:443"></a>六、端口 22 被封怎么办？——走 <code>ssh.github.com:443</code></h2><h3 id="6-1-创建-编辑-ssh-config（无扩展名的-config）"><a href="#6-1-创建-编辑-ssh-config（无扩展名的-config）" class="headerlink" title="6.1 创建&#x2F;编辑 ~/.ssh/config（无扩展名的 config）"></a>6.1 创建&#x2F;编辑 <code>~/.ssh/config</code>（<strong>无扩展名</strong>的 <code>config</code>）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">%USERPROFILE%</span>\.ssh\config      &amp; <span class="built_in">rem</span> 打开或新建配置文件（确保不是 config.txt）</span><br></pre></td></tr></table></figure><p>写入<strong>最小可用配置</strong>（完整粘贴，保存）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName ssh.github.com      # 指向 GitHub 的 SSH-Over-HTTPS 域名</span><br><span class="line">  Port 443                     # 走 443 端口，绕过 22 的封锁</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa   # 或 ~/.ssh/id_ed25519 按你实际密钥修改</span><br><span class="line">  ServerAliveInterval 60</span><br><span class="line">  ServerAliveCountMax 120</span><br></pre></td></tr></table></figure><h3 id="6-2-验证配置是否生效"><a href="#6-2-验证配置是否生效" class="headerlink" title="6.2 验证配置是否生效"></a>6.2 验证配置是否生效</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -G github.com | <span class="built_in">findstr</span> /I &quot;hostname port identityfile&quot;</span><br><span class="line"><span class="comment">rem 期望输出包含：hostname ssh.github.com / port 443 / identityfile 指向你的私钥</span></span><br></pre></td></tr></table></figure><h3 id="6-3-连通性测试"><a href="#6-3-连通性测试" class="headerlink" title="6.3 连通性测试"></a>6.3 连通性测试</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T -p <span class="number">443</span> git@ssh.github.com      &amp; <span class="built_in">rem</span> 直测 <span class="number">443</span>：首次会提示 yes/no，输入 yes</span><br><span class="line">ssh -T git@github.com                 &amp; <span class="built_in">rem</span> 常规域名测试，此时会按 config 走 <span class="number">443</span></span><br></pre></td></tr></table></figure><p>出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &lt;你的 GitHub 用户名&gt;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>即成功。</p><blockquote><p>若 <code>ssh -T git@github.com</code> 仍去连 22，多半是 <strong>config 被保存成了 config.txt</strong>，务必改回<strong>无扩展名</strong>的 <code>config</code> 并重测。</p></blockquote><hr><h2 id="七、把仓库远程从-HTTPS-改为-SSH（每个仓库都要改）"><a href="#七、把仓库远程从-HTTPS-改为-SSH（每个仓库都要改）" class="headerlink" title="七、把仓库远程从 HTTPS 改为 SSH（每个仓库都要改）"></a>七、把仓库远程从 HTTPS 改为 SSH（每个仓库都要改）</h2><h3 id="7-1-单个仓库修改"><a href="#7-1-单个仓库修改" class="headerlink" title="7.1 单个仓库修改"></a>7.1 单个仓库修改</h3><p>进入<strong>仓库根目录</strong>（例如 <code>E:\Blog\hexo-source</code>）：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:&lt;你的用户名&gt;/&lt;你的仓库名&gt;.git</span><br><span class="line">git remote -v                          &amp; <span class="built_in">rem</span> 确认已变成 git@github.com:... 形式</span><br><span class="line">git fetch origin                       &amp; <span class="built_in">rem</span> 拉取测试</span><br><span class="line">git push -u origin main                &amp; <span class="built_in">rem</span> 推送测试（分支名按实际替换）</span><br></pre></td></tr></table></figure><h3 id="7-2-批量修改（可选）"><a href="#7-2-批量修改（可选）" class="headerlink" title="7.2 批量修改（可选）"></a>7.2 批量修改（可选）</h3><p><strong>PowerShell</strong> 脚本（保存为 <code>rewrite-https-to-ssh.ps1</code>）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历这些本地仓库目录，自动把 https://github.com/xxx 改为 git@github.com:xxx</span></span><br><span class="line"><span class="comment"># 使用方法：在 PowerShell 中 cd 到脚本所在目录，然后：.\rewrite-https-to-ssh.ps1</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$repos</span> = <span class="selector-tag">@</span>(</span><br><span class="line">  <span class="string">&quot;E:\Blog\hexo-source&quot;</span>,</span><br><span class="line">  <span class="string">&quot;E:\OtherProject&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$repo</span> <span class="keyword">in</span> <span class="variable">$repos</span>) &#123;</span><br><span class="line">  <span class="built_in">Write-Host</span> <span class="string">&quot;==== Fixing <span class="variable">$repo</span> ====&quot;</span></span><br><span class="line">  <span class="built_in">Set-Location</span> <span class="variable">$repo</span></span><br><span class="line">  <span class="variable">$old</span> = git remote <span class="built_in">get-url</span> origin</span><br><span class="line">  <span class="variable">$new</span> = <span class="variable">$old</span> <span class="operator">-replace</span> <span class="string">&#x27;^https://github.com/&#x27;</span>, <span class="string">&#x27;git@github.com:&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$old</span> <span class="operator">-ne</span> <span class="variable">$new</span>) &#123;</span><br><span class="line">    git remote <span class="built_in">set-url</span> origin <span class="variable">$new</span></span><br><span class="line">    git remote <span class="literal">-v</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;No change needed.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="八、Hexo-部署改用-SSH（避免-HTTPS-PAT）"><a href="#八、Hexo-部署改用-SSH（避免-HTTPS-PAT）" class="headerlink" title="八、Hexo 部署改用 SSH（避免 HTTPS&#x2F;PAT）"></a>八、Hexo 部署改用 SSH（避免 HTTPS&#x2F;PAT）</h2><p>站点根目录的 <code>_config.yml</code>（注意是<strong>站点级</strong>，非主题）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>                  <span class="comment"># hexo-deployer-git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;你的用户名&gt;/&lt;你的</span> <span class="string">pages</span> <span class="string">仓库&gt;.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>               <span class="comment"># 或 gh-pages，按你的 Pages 设置</span></span><br></pre></td></tr></table></figure><p>发布流程：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   &amp; <span class="built_in">rem</span> 清理</span><br><span class="line">hexo g       &amp; <span class="built_in">rem</span> 生成静态文件</span><br><span class="line">hexo d       &amp; <span class="built_in">rem</span> 通过 SSH 推送到 repo</span><br></pre></td></tr></table></figure><hr><h2 id="九、常见报错与“对症一条命令”"><a href="#九、常见报错与“对症一条命令”" class="headerlink" title="九、常见报错与“对症一条命令”"></a>九、常见报错与“对症一条命令”</h2><h3 id="1-Failed-to-connect-to-127-0-0-1-7890-Proxy-CONNECT-aborted"><a href="#1-Failed-to-connect-to-127-0-0-1-7890-Proxy-CONNECT-aborted" class="headerlink" title="1) Failed to connect to 127.0.0.1:7890 &#x2F; Proxy CONNECT aborted"></a>1) <code>Failed to connect to 127.0.0.1:7890</code> &#x2F; <code>Proxy CONNECT aborted</code></h3><ul><li><strong>原因</strong>：Git 仍在走本机代理（端口不存在或协议不匹配）。</li><li><strong>解决</strong>：清理代理（见第二章），或改用 SSH。</li></ul><h3 id="2-ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#2-ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="2) ssh: connect to host github.com port 22: Connection timed out"></a>2) <code>ssh: connect to host github.com port 22: Connection timed out</code></h3><ul><li><strong>原因</strong>：22 端口被封，或 config 未生效。</li><li><strong>解决</strong>：按第六章使用 <code>ssh.github.com:443</code>；用 <code>ssh -G github.com</code> 核对端口是否为 443；检查 <code>~/.ssh/config</code> <strong>不是</strong> <code>config.txt</code>。</li></ul><h3 id="3-Host-key-verification-failed"><a href="#3-Host-key-verification-failed" class="headerlink" title="3) Host key verification failed"></a>3) <code>Host key verification failed</code></h3><ul><li><strong>原因</strong>：首次连接缺少 host key 或 <code>known_hosts</code> 里记录不匹配。</li><li><strong>解决</strong>：重新连接，看到提示时输入 <code>yes</code>；若冲突，编辑 <code>%USERPROFILE%\.ssh\known_hosts</code> 删除对应行再连。</li></ul><h3 id="4-Permission-denied-publickey"><a href="#4-Permission-denied-publickey" class="headerlink" title="4) Permission denied (publickey)"></a>4) <code>Permission denied (publickey)</code></h3><ul><li><strong>原因</strong>：GitHub 未添加你的公钥，或 <code>ssh-agent</code> 未加载私钥。</li><li><strong>解决</strong>：把 <code>id_rsa.pub</code>&#x2F;<code>id_ed25519.pub</code> 添加到 GitHub；执行 <code>ssh-add &lt;私钥路径&gt;</code>；用 <code>ssh-add -l</code> 确认已加载。</li></ul><h3 id="5-VS-Code-仍报-https-github-com"><a href="#5-VS-Code-仍报-https-github-com" class="headerlink" title="5) VS Code 仍报 https://github.com/..."></a>5) VS Code 仍报 <code>https://github.com/...</code></h3><ul><li><p><strong>原因</strong>：仓库远程还是 HTTPS，或 VS Code 注入了代理。</p></li><li><p><strong>解决</strong>：在仓库里执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:&lt;你&gt;/&lt;仓库&gt;.git</span><br></pre></td></tr></table></figure><p>然后在 VS Code：<strong>Settings → Http: Proxy</strong> 置空，命令面板 <strong>“Git: Show Git Output”</strong> 确认日志使用 <code>git@github.com:</code> 形式。</p></li></ul><hr><h2 id="十、最终检查清单（一次通过）"><a href="#十、最终检查清单（一次通过）" class="headerlink" title="十、最终检查清单（一次通过）"></a>十、最终检查清单（一次通过）</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh -G github.com | <span class="built_in">findstr</span> /I &quot;hostname port identityfile&quot;  &amp; <span class="built_in">rem</span> 应为 ssh.github.com / <span class="number">443</span> / 指向你的私钥</span><br><span class="line">ssh -T git@github.com                                        &amp; <span class="built_in">rem</span> 成功提示 You&#x27;ve successfully authenticated...</span><br><span class="line">git remote -v                                                &amp; <span class="built_in">rem</span> 每个仓库远程应为 git@github.com:...</span><br><span class="line">git fetch origin                                             &amp; <span class="built_in">rem</span> 拉取无误</span><br><span class="line">git push -u origin &lt;branch&gt;                                  &amp; <span class="built_in">rem</span> 推送无误</span><br></pre></td></tr></table></figure><hr><h2 id="附：遇到“必须用-HTTPS”的环境怎么办？"><a href="#附：遇到“必须用-HTTPS”的环境怎么办？" class="headerlink" title="附：遇到“必须用 HTTPS”的环境怎么办？"></a>附：遇到“必须用 HTTPS”的环境怎么办？</h2><p>极个别企业网络强制 HTTPS：</p><ul><li>临时切回 HTTPS：<code>git remote set-url origin https://github.com/&lt;你&gt;/&lt;仓库&gt;.git</code>，并使用 Git Credential Manager（或个人访问令牌 PAT）。</li><li>或在 <code>~/.ssh/config</code> 里通过 <strong>HTTP CONNECT 代理</strong>转发 SSH（需要额外工具，如 netcat&#x2F;proxytunnel；一般不推荐，复杂度高）。</li></ul><hr><p><strong>SSH 一次配置，处处生效</strong>。关键点只有三个——</p><ol><li><code>~/.ssh/config</code> 走 <code>ssh.github.com:443</code>；</li><li><code>ssh-agent</code> 中有你的私钥；</li><li>每个仓库的 <code>origin</code> 用 <code>git@github.com:...</code>。<br>做到这三步，Git push&#x2F;pull 将长期稳定。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> GitHub </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AR Sandbox Projection · 工程复盘（独立开发）</title>
      <link href="/2025/08/20/%E4%B8%AA%E4%BA%BA%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E2%80%94SandBox/"/>
      <url>/2025/08/20/%E4%B8%AA%E4%BA%BA%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E2%80%94SandBox/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统采用 Unity（C#）与 Orbbec&#x2F;Astra 深度相机，包含深度→网格、标定&#x2F;投影、ROI 联动、Shader 参数中台、生态分布与交互、稳定性工程化等完整链路。</p></blockquote><span id="more"></span><h2 id="0-运行环境"><a href="#0-运行环境" class="headerlink" title="0) 运行环境"></a>0) 运行环境</h2><ul><li><strong>引擎</strong>：Unity（建议 2021+，内置或 URP 均可）</li><li><strong>硬件</strong>：Orbbec&#x2F;Astra（深度 + 彩色）</li><li><strong>UI&#x2F;依赖</strong>：UGUI + TextMeshPro；参数持久化使用 <code>PlayerPrefs</code></li><li><strong>部署</strong>：Windows x64，双显示器（主屏控制 + 副屏投影）</li></ul><hr><h2 id="1-项目目标与成果"><a href="#1-项目目标与成果" class="headerlink" title="1) 项目目标与成果"></a>1) 项目目标与成果</h2><ul><li>将 Astra 深度数据<strong>实时</strong>重建为 Unity 网格（Mesh），实现<strong>物理等比</strong>与<strong>投影对齐</strong>。</li><li>通过 <strong>ROI 双窗口联动</strong>（Mesh&#x2F;Color）完成区域标定与<strong>像素级裁剪</strong>。</li><li>构建 <strong>Shader 参数中台</strong>，统一水陆阈值、等高线、主题&#x2F;天气；生态&#x2F;显示共享同一“世界解释”。</li><li>提供 <strong>副屏投影模板</strong>（正交相机 + 动态 RenderTexture 自适应）与<strong>一站式标定接口</strong>。</li><li>叠加 <strong>轻量生态系统</strong>（鱼&#x2F;鸟&#x2F;走兽&#x2F;鲨&#x2F;宝箱 + 捕鱼模式），表现可控、耦合低。</li><li>关键参数<strong>全链路持久化</strong>，按 SOP 快速布展与复现。</li></ul><hr><h2 id="2-系统结构"><a href="#2-系统结构" class="headerlink" title="2) 系统结构"></a>2) 系统结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Astra 深度/彩色帧</span><br><span class="line">   └─ AstraMeshController（深度→网格；等比/拉平/矫正/落盘）</span><br><span class="line">       ├─ ProjectionCalibrationController（Mesh/投影相机 一站式标定）</span><br><span class="line">       ├─ ROIManager + ROICornerDragger（ROI 双窗口角点联动）</span><br><span class="line">       ├─ AstraDisplayUI（彩色裁剪、滤波切换、UI 联动）</span><br><span class="line">       ├─ DynamicRT（RawImage ↔ RenderTexture 自适应）</span><br><span class="line">       ├─ MaterialParamManager + SandboxSettingsUI（Shader 参数中台）</span><br><span class="line">       ├─ WeatherManager（主题/天气与光照/雾效联动）</span><br><span class="line">       └─ ModelSpawnerManager + Fish/Bird/Beast/Shark/Treasure/Fishing（生态）</span><br></pre></td></tr></table></figure><hr><h2 id="3-目录（核心脚本）"><a href="#3-目录（核心脚本）" class="headerlink" title="3) 目录（核心脚本）"></a>3) 目录（核心脚本）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">AstraMeshController.cs</span><br><span class="line">ProjectionCalibrationController.cs</span><br><span class="line">DynamicRT.cs</span><br><span class="line">ROIManager.cs</span><br><span class="line">ROICornerDragger.cs</span><br><span class="line">AstraDisplayUI.cs</span><br><span class="line">MaterialParamManager.cs</span><br><span class="line">SandboxSettingsUI.cs</span><br><span class="line">WeatherManager.cs</span><br><span class="line">ModelSpawnerManager.cs</span><br><span class="line">FishController.cs</span><br><span class="line">BirdController.cs</span><br><span class="line">BeastController.cs</span><br><span class="line">SharkSpawner.cs</span><br><span class="line">SharkController.cs</span><br><span class="line">SharkSettingsUI.cs</span><br><span class="line">TreasureChestController.cs</span><br><span class="line">FishingManager.cs</span><br></pre></td></tr></table></figure><hr><h2 id="4-关键模块与源码"><a href="#4-关键模块与源码" class="headerlink" title="4) 关键模块与源码"></a>4) 关键模块与源码</h2><h3 id="4-1-深度→网格与物理对齐（AstraMeshController-cs）"><a href="#4-1-深度→网格与物理对齐（AstraMeshController-cs）" class="headerlink" title="4.1 深度→网格与物理对齐（AstraMeshController.cs）"></a>4.1 深度→网格与物理对齐（<code>AstraMeshController.cs</code>）</h3><p><strong>职责</strong>：深度帧→三角网&#x2F;UV&#x2F;顶点；1:1 等比；围栏拉平；全局偏移&#x2F;旋转&#x2F;基准抬升；参数持久化。</p><p><strong>要点</strong>：<code>xyScale/zScale</code> + <code>useRealWorldSize/realWorldSize</code>；边界采样 + 平面拟合；<code>PlayerPrefs</code> 落盘。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> Mesh Params Save/Load（网格参数落盘/恢复）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveMeshParamsToPrefs</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    PlayerPrefs.SetFloat(<span class="string">&quot;Mesh_HorizontalOffset&quot;</span>, positionOffset.x); <span class="comment">// XZ 偏移-X</span></span><br><span class="line">    PlayerPrefs.SetFloat(<span class="string">&quot;Mesh_VerticalOffset&quot;</span>,   positionOffset.z); <span class="comment">// XZ 偏移-Z</span></span><br><span class="line">    PlayerPrefs.SetFloat(<span class="string">&quot;Mesh_BaseOffset&quot;</span>,       baseOffset);       <span class="comment">// 全局抬升-Y</span></span><br><span class="line">    PlayerPrefs.SetFloat(<span class="string">&quot;Mesh_RotationY&quot;</span>,        rotationOffset.y); <span class="comment">// 绕 Y 微调</span></span><br><span class="line">    PlayerPrefs.Save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadMeshParamsFromPrefs</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    positionOffset.x = PlayerPrefs.GetFloat(<span class="string">&quot;Mesh_HorizontalOffset&quot;</span>, <span class="number">0f</span>);</span><br><span class="line">    positionOffset.z = PlayerPrefs.GetFloat(<span class="string">&quot;Mesh_VerticalOffset&quot;</span>,   <span class="number">0f</span>);</span><br><span class="line">    baseOffset       = PlayerPrefs.GetFloat(<span class="string">&quot;Mesh_BaseOffset&quot;</span>,       <span class="number">0f</span>);</span><br><span class="line">    rotationOffset.y = PlayerPrefs.GetFloat(<span class="string">&quot;Mesh_RotationY&quot;</span>,        <span class="number">0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Fence Level（围栏拉平：边界采样 + 平面拟合）</span></span><br><span class="line">[<span class="meta">ContextMenu(<span class="string">&quot;Fence Level Now&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FenceLevelCorrectionRequest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    fenceLevelCorrectionRequested = <span class="literal">false</span>;</span><br><span class="line">    UpdateMeshVertices(); <span class="comment">// 内部触发 FenceLevelCorrect(originalVertices)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FenceLevelCorrect</span>(<span class="params">Vector3[] verts</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> borderPoints = <span class="keyword">new</span> List&lt;Vector3&gt;(); <span class="comment">// 1) 采集四周边界点（剔除异常值）</span></span><br><span class="line">    <span class="comment">// ... 收集边界点到 borderPoints</span></span><br><span class="line">    Plane plane = FitPlaneToPoints(borderPoints); <span class="comment">// 2) 最小二乘拟合平面</span></span><br><span class="line">    Quaternion deltaRot = Quaternion.FromToRotation(transform.up, plane.normal); <span class="comment">// 3) 旋转矫正</span></span><br><span class="line">    transform.rotation = deltaRot * transform.rotation;</span><br><span class="line">    transform.position += <span class="keyword">new</span> Vector3(<span class="number">0f</span>, baseOffset, <span class="number">0f</span>); <span class="comment">// 4) 基准抬升</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Public Access（对外接口）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Vector3[] <span class="title">GetMeshVertices</span>()</span> =&gt; originalVertices;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>   <span class="title">SetRotationOffsetY</span>(<span class="params"><span class="built_in">float</span> ry</span>)</span> =&gt; rotationOffset.y = ry;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span>  <span class="title">GetRotationOffsetY</span>()</span> =&gt; rotationOffset.y;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="4-2-投影与多显示模板（ProjectionCalibrationController-cs、DynamicRT-cs）"><a href="#4-2-投影与多显示模板（ProjectionCalibrationController-cs、DynamicRT-cs）" class="headerlink" title="4.2 投影与多显示模板（ProjectionCalibrationController.cs、DynamicRT.cs）"></a>4.2 投影与多显示模板（<code>ProjectionCalibrationController.cs</code>、<code>DynamicRT.cs</code>）</h3><p><strong>职责</strong>：集中暴露 Mesh&#x2F;相机几何参数；正交相机副屏输出；RawImage→RT 自适应，仅在尺寸变化时重建。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProjectionCalibrationController.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> One-Stop Calibration（标定入口）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMeshScaleX</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; meshCtrl.realWorldSize.x = v;   <span class="comment">// 物理宽</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMeshScaleZ</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; meshCtrl.realWorldSize.y = v;   <span class="comment">// 物理深</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMeshBaseOffset</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; meshCtrl.SetBaseOffset(v);  <span class="comment">// 全局抬升</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMeshRotY</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; meshCtrl.SetRotationOffsetY(v);   <span class="comment">// Y 旋</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraX</span>(<span class="params"><span class="built_in">float</span> v</span>)</span>&#123; <span class="keyword">var</span> p=projectorCamera.transform.position; p.x=v; projectorCamera.transform.position=p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraY</span>(<span class="params"><span class="built_in">float</span> v</span>)</span>&#123; <span class="keyword">var</span> p=projectorCamera.transform.position; p.y=v; projectorCamera.transform.position=p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraZ</span>(<span class="params"><span class="built_in">float</span> v</span>)</span>&#123; <span class="keyword">var</span> p=projectorCamera.transform.position; p.z=v; projectorCamera.transform.position=p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraOrthoSize</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; projectorCamera.orthographicSize = v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MeshFenceLevel</span>()</span> =&gt; meshCtrl.FenceLevelCorrectionRequest(); <span class="comment">// 一键拉平</span></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DynamicRT.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> DynamicRT（按需重建 RT 并同步相机宽高比）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span> =&gt; UpdateRenderTexture();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateRenderTexture</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> rect = rawImage.rectTransform.rect;</span><br><span class="line">    <span class="built_in">int</span> w = Mathf.Max(<span class="number">1</span>, Mathf.RoundToInt(rect.width));</span><br><span class="line">    <span class="built_in">int</span> h = Mathf.Max(<span class="number">1</span>, Mathf.RoundToInt(rect.height));</span><br><span class="line">    <span class="keyword">if</span> (rt == <span class="literal">null</span> || rt.width != w || rt.height != h)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rt != <span class="literal">null</span>) rt.Release();</span><br><span class="line">        rt = <span class="keyword">new</span> RenderTexture(w, h, <span class="number">16</span>);</span><br><span class="line">        renderCam.targetTexture = rt;</span><br><span class="line">        rawImage.texture = rt;</span><br><span class="line">        renderCam.aspect = (<span class="built_in">float</span>)w / h; <span class="comment">// 防止拉伸</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="4-3-ROI-双窗口联动与彩色裁剪（ROIManager-cs、ROICornerDragger-cs、AstraDisplayUI-cs）"><a href="#4-3-ROI-双窗口联动与彩色裁剪（ROIManager-cs、ROICornerDragger-cs、AstraDisplayUI-cs）" class="headerlink" title="4.3 ROI 双窗口联动与彩色裁剪（ROIManager.cs、ROICornerDragger.cs、AstraDisplayUI.cs）"></a>4.3 ROI 双窗口联动与彩色裁剪（<code>ROIManager.cs</code>、<code>ROICornerDragger.cs</code>、<code>AstraDisplayUI.cs</code>）</h3><p><strong>职责</strong>：Mesh&#x2F;Color 两窗口角点拖拽<strong>双向同步</strong>；彩色帧<strong>像素级裁剪</strong>；角点&#x2F;ROI <strong>落盘恢复</strong>；局部相机随 ROI <strong>自动对齐</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ROIManager.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> ROI Save/Load（角点落盘与延迟恢复）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveROIToPrefs</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = roiCornersMesh[i].anchoredPosition;</span><br><span class="line">        PlayerPrefs.SetFloat(<span class="string">$&quot;ROI_Corner_<span class="subst">&#123;i&#125;</span>_X&quot;</span>, pos.x);</span><br><span class="line">        PlayerPrefs.SetFloat(<span class="string">$&quot;ROI_Corner_<span class="subst">&#123;i&#125;</span>_Y&quot;</span>, pos.y);</span><br><span class="line">    &#125;</span><br><span class="line">    PlayerPrefs.Save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IEnumerator <span class="title">DelayLoadROI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> wasActive = calibrationPanel.activeSelf;</span><br><span class="line">    calibrationPanel.SetActive(<span class="literal">true</span>);   <span class="comment">// 强制激活，确保 Canvas 完成布局</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;                  <span class="comment">// 等一帧，等待布局稳定</span></span><br><span class="line">    LoadROIFromPrefs();</span><br><span class="line">    UpdateAll();                        <span class="comment">// 同步 ROI、相机与裁剪</span></span><br><span class="line">    calibrationPanel.SetActive(wasActive);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ROICornerDragger.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Corner Drag（角点拖拽与双向同步）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RectTransformUtility.ScreenPointToLocalPointInRectangle(</span><br><span class="line">        parentRawImageRect, e.position, e.pressEventCamera, <span class="keyword">out</span> startLocal);</span><br><span class="line">    startOffset = (Vector2)transform.localPosition - startLocal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RectTransformUtility.ScreenPointToLocalPointInRectangle(</span><br><span class="line">        parentRawImageRect, e.position, e.pressEventCamera, <span class="keyword">out</span> Vector2 local);</span><br><span class="line">    Vector2 newPos = local + startOffset;</span><br><span class="line">    <span class="keyword">var</span> r = parentRawImageRect.rect;</span><br><span class="line">    newPos.x = Mathf.Clamp(newPos.x, r.xMin, r.xMax);</span><br><span class="line">    newPos.y = Mathf.Clamp(newPos.y, r.yMin, r.yMax);</span><br><span class="line">    ((RectTransform)transform).anchoredPosition = newPos;</span><br><span class="line">    roiManager.OnCornerMoved(cornerIndex, belongsToMeshWindow: <span class="literal">true</span>); <span class="comment">// 双向同步</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AstraDisplayUI.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> ROI Crop（像素级裁剪输出）</span></span><br><span class="line"><span class="keyword">private</span> Texture2D _roiTex;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CropAndShowROI</span>(<span class="params">Texture2D src, RectInt roi</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    roi.x = Mathf.Clamp(roi.x, <span class="number">0</span>, Mathf.Max(<span class="number">0</span>, src.width  - <span class="number">1</span>));</span><br><span class="line">    roi.y = Mathf.Clamp(roi.y, <span class="number">0</span>, Mathf.Max(<span class="number">0</span>, src.height - <span class="number">1</span>));</span><br><span class="line">    roi.width  = Mathf.Clamp(roi.width,  <span class="number">1</span>, src.width  - roi.x);</span><br><span class="line">    roi.height = Mathf.Clamp(roi.height, <span class="number">1</span>, src.height - roi.y);</span><br><span class="line">    <span class="keyword">var</span> pixels = src.GetPixels(roi.x, roi.y, roi.width, roi.height);</span><br><span class="line">    <span class="keyword">if</span> (_roiTex == <span class="literal">null</span> || _roiTex.width != roi.width || _roiTex.height != roi.height)</span><br><span class="line">        _roiTex = <span class="keyword">new</span> Texture2D(roi.width, roi.height, TextureFormat.RGBA32, <span class="literal">false</span>);</span><br><span class="line">    _roiTex.SetPixels(pixels);</span><br><span class="line">    _roiTex.Apply(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    roiPreviewRawImage.texture = _roiTex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> UI Shortcut（滤波 σ 快切）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha5))</span><br><span class="line">        ToggleGaussianSigma();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="4-4-Shader-参数中台与分层阈值（MaterialParamManager-cs、SandboxSettingsUI-cs）"><a href="#4-4-Shader-参数中台与分层阈值（MaterialParamManager-cs、SandboxSettingsUI-cs）" class="headerlink" title="4.4 Shader 参数中台与分层阈值（MaterialParamManager.cs、SandboxSettingsUI.cs）"></a>4.4 Shader 参数中台与分层阈值（<code>MaterialParamManager.cs</code>、<code>SandboxSettingsUI.cs</code>）</h3><p><strong>职责</strong>：统一封装地形&#x2F;火山&#x2F;雪&#x2F;等高线；语义化接口；UI 双向绑定与边界有序约束；阈值驱动生态与显示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MaterialParamManager.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Terrain Params（地形分层/等高线）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTerrainBorder0</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; SetFloat(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_Border0&quot;</span>, v);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTerrainBorder1</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; SetFloat(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_Border1&quot;</span>, v);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTerrainBorder2</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; SetFloat(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_Border2&quot;</span>, v);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTerrainBlendRange</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; SetFloat(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_BlendRange&quot;</span>, v);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetContourSpacing</span>(<span class="params"><span class="built_in">float</span> v</span>)</span> =&gt; SetFloat(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_ContourSpacing&quot;</span>, v);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetContourSmoothness</span>(<span class="params"><span class="built_in">float</span> v</span>)</span>=&gt; SetFloat(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_ContourSmoothness&quot;</span>, v);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetContourColor</span>(<span class="params">Color c</span>)</span>     =&gt; SetColor(<span class="string">&quot;terrain&quot;</span>, <span class="string">&quot;_ContourColor&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, Material&gt; matDict = <span class="keyword">new</span>();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetFloat</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> prop, <span class="built_in">float</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (matDict.TryGetValue(name, <span class="keyword">out</span> <span class="keyword">var</span> m) &amp;&amp; m.HasProperty(prop))</span><br><span class="line">        m.SetFloat(prop, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetColor</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> prop, Color <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (matDict.TryGetValue(name, <span class="keyword">out</span> <span class="keyword">var</span> m) &amp;&amp; m.HasProperty(prop))</span><br><span class="line">        m.SetColor(prop, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SandboxSettingsUI.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> UI Binding（滑条/输入框双向绑定 + 边界有序约束）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSliderAndInput</span>(<span class="params">Slider s, TMP_InputField i, <span class="built_in">float</span> min, <span class="built_in">float</span> max, <span class="built_in">float</span> def, Action&lt;<span class="built_in">float</span>&gt; onChanged</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    s.minValue = min; s.maxValue = max; s.SetValueWithoutNotify(def);</span><br><span class="line">    i.text = def.ToString(<span class="string">&quot;F2&quot;</span>);</span><br><span class="line">    s.onValueChanged.AddListener(v =&gt; &#123; i.SetTextWithoutNotify(v.ToString(<span class="string">&quot;F2&quot;</span>)); onChanged(v); Save(); &#125;);</span><br><span class="line">    i.onEndEdit.AddListener(t =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">float</span>.TryParse(t, <span class="keyword">out</span> <span class="keyword">var</span> v)) &#123; v = Mathf.Clamp(v, min, max); s.SetValueWithoutNotify(v); onChanged(v); Save(); &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnforceBordersOrder</span>() <span class="comment">// Border0 &lt; Border1 &lt; Border2</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> b0 = GetSlider(terrainBorder0Slider);</span><br><span class="line">    <span class="built_in">float</span> b1 = Mathf.Max(b0 + <span class="number">0.01f</span>, GetSlider(terrainBorder1Slider));</span><br><span class="line">    <span class="built_in">float</span> b2 = Mathf.Max(b1 + <span class="number">0.01f</span>, GetSlider(terrainBorder2Slider));</span><br><span class="line">    terrainBorder1Slider.SetValueWithoutNotify(b1);</span><br><span class="line">    terrainBorder2Slider.SetValueWithoutNotify(b2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="4-5-生态分布与行为（ModelSpawnerManager-cs、SharkSpawner-cs、SharkController-cs-等）"><a href="#4-5-生态分布与行为（ModelSpawnerManager-cs、SharkSpawner-cs、SharkController-cs-等）" class="headerlink" title="4.5 生态分布与行为（ModelSpawnerManager.cs、SharkSpawner.cs、SharkController.cs 等）"></a>4.5 生态分布与行为（<code>ModelSpawnerManager.cs</code>、<code>SharkSpawner.cs</code>、<code>SharkController.cs</code> 等）</h3><p><strong>职责</strong>：按阈值与网格生成 <code>water/ground/fly</code> 点集；行为巡航带<strong>最小位移&#x2F;最大距离</strong>与<strong>越界预测</strong>；UI&#x2F;快捷键批量控制。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ModelSpawnerManager.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Points Generation（水/地/空点集）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RefreshAllModelPoints</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IsMeshReady()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> mat = matMgr.terrainMaterial;</span><br><span class="line">    <span class="built_in">float</span> b0 = mat.GetFloat(<span class="string">&quot;_Border0&quot;</span>);</span><br><span class="line">    <span class="built_in">float</span> b2 = mat.GetFloat(<span class="string">&quot;_Border2&quot;</span>);</span><br><span class="line">    <span class="built_in">float</span> blend = mat.GetFloat(<span class="string">&quot;_BlendRange&quot;</span>);</span><br><span class="line">    <span class="built_in">float</span> waterThreshold = b2 - blend;</span><br><span class="line">    <span class="keyword">var</span> verts = meshCtrl.GetMeshVertices();</span><br><span class="line">    waterPoints  = verts.Where(v =&gt; v.y &gt;= waterThreshold).ToList();</span><br><span class="line">    groundPoints = verts.Where(v =&gt; v.y &gt; b0 &amp;&amp; v.y &lt; b2).ToList();</span><br><span class="line">    flyPoints    = verts.ToList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SharkSpawner.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Shark Sync（下发水面高度与点集）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> b2 = matParamMgr.terrainMaterial.GetFloat(<span class="string">&quot;_Border2&quot;</span>);</span><br><span class="line">    <span class="built_in">float</span> blend = matParamMgr.terrainMaterial.GetFloat(<span class="string">&quot;_BlendRange&quot;</span>);</span><br><span class="line">    SharkController.GlobalWaterBorder = b2 - blend;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> s <span class="keyword">in</span> sharks)</span><br><span class="line">        s.GetComponent&lt;SharkController&gt;().waterPoints = waterPoints;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SharkController.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Shark Target Pick（目标选择：去抖/限距/越界预测）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PickNewTarget</span>(<span class="params"><span class="built_in">bool</span> isFirst = <span class="literal">false</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (waterPoints == <span class="literal">null</span> || waterPoints.Count == <span class="number">0</span>)</span><br><span class="line">    &#123; targetPos = transform.localPosition; <span class="keyword">return</span>; &#125;</span><br><span class="line">    Vector3 cur = transform.localPosition;</span><br><span class="line">    <span class="built_in">float</span> maxSqr = maxTargetDistance * maxTargetDistance;</span><br><span class="line">    <span class="built_in">float</span> minSqr = minMoveDist * minMoveDist;</span><br><span class="line">    <span class="keyword">var</span> cand = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> wp <span class="keyword">in</span> waterPoints)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> d2 = (<span class="keyword">new</span> Vector3(wp.x, GlobalWaterBorder, wp.z) - cur).sqrMagnitude;</span><br><span class="line">        <span class="keyword">if</span> (d2 &gt; minSqr &amp;&amp; d2 &lt; maxSqr) cand.Add(wp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pick = cand.Count &gt; <span class="number">0</span> ? cand[Random.Range(<span class="number">0</span>, cand.Count)] : waterPoints[Random.Range(<span class="number">0</span>, waterPoints.Count)];</span><br><span class="line">    targetPos = <span class="keyword">new</span> Vector3(pick.x, GlobalWaterBorder, pick.z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TreasureChestController.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> Chest Appear/Hide（阈值触发显隐）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowChest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isAppeared) <span class="keyword">return</span>;</span><br><span class="line">    isAppeared = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> pos = transform.position;</span><br><span class="line">    pos.y = chestShowYOffset; <span class="comment">// 提升到可见高度</span></span><br><span class="line">    transform.position = pos;</span><br><span class="line">    SetChildrenActive(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (chestAnim) chestAnim.SetTrigger(<span class="string">&quot;Appear&quot;</span>);</span><br><span class="line">    Invoke(<span class="keyword">nameof</span>(HideChest), <span class="number">5f</span>); <span class="comment">// 自动隐藏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="4-6-主题-天气与地图切换（WeatherManager-cs）"><a href="#4-6-主题-天气与地图切换（WeatherManager-cs）" class="headerlink" title="4.6 主题&#x2F;天气与地图切换（WeatherManager.cs）"></a>4.6 主题&#x2F;天气与地图切换（<code>WeatherManager.cs</code>）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> Weather/Map（天气/地图）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoClear</span>()</span> =&gt; SetWeather(WeatherType.Clear);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoRain</span>()</span>  =&gt; SetWeather(WeatherType.Rain);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSnow</span>()</span>  =&gt; SetWeather(WeatherType.Snow);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMap0</span>()</span> =&gt; SwitchMap(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMap1</span>()</span> =&gt; SwitchMap(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWeather</span>(<span class="params">WeatherType t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 关闭上一个天气 → 启用当前（粒子/叠加材质）</span></span><br><span class="line">    <span class="comment">// 调整主光强与雾效，保证视觉一致</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="5-标定与演示-SOP"><a href="#5-标定与演示-SOP" class="headerlink" title="5) 标定与演示 SOP"></a>5) 标定与演示 SOP</h2><ol><li><strong>分层优先</strong>：在设置面板调 <code>_Border0/_Border1/_Border2/_BlendRange</code>，先稳定“水面阈值&#x2F;地表层级”。</li><li><strong>ROI 校准</strong>：Mesh&#x2F;Color 两窗口四角拖拽（<strong>双向同步</strong>），自动落盘；彩色帧按 ROI <strong>像素级裁剪</strong>。</li><li><strong>姿态&#x2F;尺寸</strong>：用一站式接口调整 Mesh 偏移&#x2F;旋转&#x2F;等比尺寸与投影相机 <code>OrthoSize</code>；围栏歪斜用“一键拉平”。</li><li><strong>主题&#x2F;天气</strong>：切换 Clear&#x2F;Rain&#x2F;Snow&#x2F;Volcano 与 Map0&#x2F;Map1（光照&#x2F;雾效联动）。</li><li><strong>生态&#x2F;互动</strong>：<code>F1/F2/F3</code> 刷鱼&#x2F;鸟&#x2F;走兽，<code>F5</code> 刷新全部，<code>F6</code> 清空；<code>F8</code> 捕鱼模式；<code>F7</code> 调试显宝箱。</li><li><strong>持久化</strong>：Mesh&#x2F;ROI&#x2F;Shader&#x2F;UI 参数统一 <code>PlayerPrefs</code> 落盘，二次启动即用。</li></ol><hr><h2 id="6-快捷键速查"><a href="#6-快捷键速查" class="headerlink" title="6) 快捷键速查"></a>6) 快捷键速查</h2><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>滤波 σ 快切</td><td><code>5</code></td></tr><tr><td>鱼 &#x2F; 鸟 &#x2F; 走兽 刷新</td><td><code>F1 / F2 / F3</code></td></tr><tr><td>全部刷新 &#x2F; 清空</td><td><code>F5 / F6</code></td></tr><tr><td>鲨鱼 刷新 &#x2F; 清空</td><td><code>3 / 4</code></td></tr><tr><td>捕鱼模式</td><td><code>F8</code></td></tr><tr><td>天气：雨 &#x2F; 雪 &#x2F; 晴 &#x2F; 火山</td><td><code>R / S / C / V</code></td></tr><tr><td>地图切换</td><td><code>1 / 2</code></td></tr><tr><td>宝箱显现（调试）</td><td><code>F7</code></td></tr></tbody></table><hr><h2 id="7-稳定性与工程化"><a href="#7-稳定性与工程化" class="headerlink" title="7) 稳定性与工程化"></a>7) 稳定性与工程化</h2><ul><li><strong>按需分配</strong>：RT&#x2F;纹理尺寸变更才重建；实例池按目标数增删，减少 <code>Instantiate/Destroy</code>。</li><li><strong>越界与抖动</strong>：最小位移&#x2F;最大距离 + 下一帧越界预测，不合法即重选。</li><li><strong>UI 约束</strong>：<code>SetValueWithoutNotify</code> 防事件回环；<code>EnforceBordersOrder</code> 保证边界有序。</li><li><strong>日志可观测</strong>：聚焦刷新&#x2F;清空&#x2F;强制动作；发布构建统一降级日志级别。</li><li><strong>异常防护</strong>：空引用&#x2F;尺寸越界&#x2F;ROI 出界均有 Clamp 与判空，避免运行期崩溃。</li></ul><hr><h2 id="8-独立负责与落地产出（Solo-Ownership）"><a href="#8-独立负责与落地产出（Solo-Ownership）" class="headerlink" title="8) 独立负责与落地产出（Solo Ownership）"></a>8) 独立负责与落地产出（Solo Ownership）</h2><ul><li><strong>深度→网格</strong>：实时重建、等比标定、围栏拉平、全局矫正、参数持久化。</li><li><strong>投影&#x2F;多显示</strong>：正交相机模板、动态 RT 自适应、一站式标定接口。</li><li><strong>ROI 系统</strong>：双窗口角点联动、像素级裁剪、延迟恢复与落盘。</li><li><strong>Shader 中台</strong>：分层阈值与等高线&#x2F;火山&#x2F;雪等主题的语义化接口。</li><li><strong>生态&#x2F;互动</strong>：阈值驱动的水&#x2F;地&#x2F;空区域分布与行为（鱼&#x2F;鸟&#x2F;走兽&#x2F;鲨&#x2F;宝箱&#x2F;捕鱼）。</li><li><strong>SOP 与文档</strong>：现场标定流程、快捷键体系、排障要点。</li></ul><hr><h2 id="9-常见问题（快速排查）"><a href="#9-常见问题（快速排查）" class="headerlink" title="9) 常见问题（快速排查）"></a>9) 常见问题（快速排查）</h2><ul><li><strong>ROI 初次进入错位</strong>：<code>DelayLoadROI()</code> 先激活校准面板并等一帧再恢复角点；必要时调用 <code>Canvas.ForceUpdateCanvases()</code>。</li><li><strong>投影画面拉伸&#x2F;糊</strong>：确认 <code>DynamicRT</code> 正在按 <code>RawImage</code> 像素尺寸重建 RT，并同步 <code>renderCam.aspect</code>。</li><li><strong>分层边界“打架”</strong>：UI 以 <code>EnforceBordersOrder()</code> 保证 <code>Border0 &lt; Border1 &lt; Border2</code>，回写材质前 Clamp。</li><li><strong>鱼&#x2F;鲨“卡位”或越界</strong>：增大 <code>minMoveDist</code>、收紧 <code>maxTargetDistance</code>，确保越界预测生效。</li><li><strong>二次启动丢参数</strong>：检查 <code>PlayerPrefs.Save()</code> 是否调用、键名是否一致；必要时清理后重新保存。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
          <category> 项目复盘 </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Orbbec Astra </tag>
            
            <tag> Depth-to-Mesh </tag>
            
            <tag> ROI Calibration </tag>
            
            <tag> Multi-Display Projection </tag>
            
            <tag> Shader Parameter Hub </tag>
            
            <tag> Real-time Agents </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3DRacing 可复用架构实战：圆柱地形·两片段循环·一键停世界</title>
      <link href="/2025/08/08/3DRacing/"/>
      <url>/2025/08/08/3DRacing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标：把“无限圆柱世界 + 轻量物理 + 清晰手感”落成稳定架构，<strong>玩法好调</strong>、<strong>模块易扩</strong>、<strong>性能可控</strong>。本文对齐项目空间里的脚本与资源约定，总结为一篇能直接放进博客的技术复盘。</p></blockquote><span id="more"></span><h2 id="一、项目概览"><a href="#一、项目概览" class="headerlink" title="一、项目概览"></a>一、项目概览</h2><ul><li><p><strong>玩法</strong>：沿圆柱隧道疾行，穿过 <strong>Gate</strong> 加分、触碰 <strong>Obstacle</strong> 或翻车则 <strong>Game Over</strong>；秒表按 <code>MM:SS</code> 展示；延迟 0.6s 重开场景形成“有呼吸的复位”。</p></li><li><p><strong>核心系统</strong></p><ul><li><strong>WorldGenerator</strong>：Perlin 噪声卷圆 → <strong>两片段循环</strong>（只保留“当前+下一段”）。</li><li><strong>BasicMovement</strong>：把“前进&#x2F;旋转”统一挂在世界和灯光上（<strong>世界动，车相对静</strong>），并支持一键清零。</li><li><strong>Car</strong>：双输入（鼠标左右半屏&#x2F;键盘水平轴）、<code>WheelCollider</code> 对齐轮胎、草屑&#x2F;胎印、离地下压力、解体反馈。</li><li><strong>CameraFollow</strong>：启动期低阻尼，首次输入后恢复常规阻尼。</li><li><strong>GameManager</strong>：分数&#x2F;时间&#x2F;UI&#x2F;音效&#x2F;一键停世界&#x2F;重启。</li><li><strong>Gate &amp; Obstacle</strong>：触发计分；实体碰撞终止。</li></ul></li><li><p><strong>工程策略</strong>：<strong>TMP 优先</strong>（旧 Text 仅兜底）、<strong>协程分帧</strong>（换段让一帧）、<strong>可见性&#x2F;阴影截断</strong>（只渲染近处、只给下半圆投影）。</p></li></ul><hr><h2 id="二、目录结构与资源约定"><a href="#二、目录结构与资源约定" class="headerlink" title="二、目录结构与资源约定"></a>二、目录结构与资源约定</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Assets/</span><br><span class="line">├─ Scripts/Racing/</span><br><span class="line">│  ├─ GameManager.cs</span><br><span class="line">│  ├─ WorldGenerator.cs</span><br><span class="line">│  ├─ BasicMovement.cs</span><br><span class="line">│  ├─ Car.cs</span><br><span class="line">│  ├─ CameraFollow.cs</span><br><span class="line">│  ├─ Gate.cs</span><br><span class="line">│  ├─ Obstacle.cs</span><br><span class="line">│  └─ CarGameOverTrigger.cs</span><br><span class="line">├─ Prefabs/</span><br><span class="line">│  ├─ Car.prefab                  # 轮胎 Mesh 与 WheelCollider 一一对应</span><br><span class="line">│  ├─ Gate.prefab                 # 触发器盒 + 实碰撞体（用于被撞反应）</span><br><span class="line">│  └─ Obstacle_Spike.prefab</span><br><span class="line">├─ Materials/ &amp; Shaders/</span><br><span class="line">├─ Audio/</span><br><span class="line">│  ├─ Background loop.wav</span><br><span class="line">│  ├─ Score.mp3</span><br><span class="line">│  └─ Game over.wav</span><br><span class="line">└─ UI/</span><br><span class="line">   └─ TextMeshPro/Fonts</span><br></pre></td></tr></table></figure><p><strong>命名与标签</strong></p><ul><li>场景中所有动态要素统一打 <code>Item</code> 标签（便于生成器做可见性&#x2F;阴影与批量停止）。</li><li>Gate 的 <strong>Trigger</strong> 要<strong>小而居中</strong>，同时保留一个轻量<strong>常规碰撞体</strong>用于被撞后的物理反馈。</li><li>车顶<strong>圆形触发器</strong>名字含 <code>World piece</code> 判翻车（或用 Layer&#x2F;Tag 更稳）。</li></ul><hr><h2 id="三、运行时数据流与分层"><a href="#三、运行时数据流与分层" class="headerlink" title="三、运行时数据流与分层"></a>三、运行时数据流与分层</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Player Input   UI (TMP_Text)</span><br><span class="line">     │             │</span><br><span class="line">     ▼             │</span><br><span class="line">   Car (输入/轮胎/特效/解体)      GameManager (分数/时间/UI/音效/停止/重启)</span><br><span class="line">     │             ▲</span><br><span class="line">     ├─────────────┘</span><br><span class="line">     │</span><br><span class="line">     ▼</span><br><span class="line">WorldGenerator ──▶ BasicMovement（世界/灯光统一运动）</span><br><span class="line">     │</span><br><span class="line">     ├─ Gate / Obstacle 生成与可见性/阴影截断</span><br><span class="line">     └─ 两片段循环（协程分帧、继承旋转）</span><br></pre></td></tr></table></figure><hr><h2 id="四、实现细节与关键脚本"><a href="#四、实现细节与关键脚本" class="headerlink" title="四、实现细节与关键脚本"></a>四、实现细节与关键脚本</h2><blockquote><p>说明：以下片段与常见实现保持一致，<strong>不强耦合资源</strong>，可以平滑落到你的工程。所有字段命名均为示例，可在 Inspector 对齐后使用。</p></blockquote><h3 id="1-GameManager：分数-计时-一键停世界-重启"><a href="#1-GameManager：分数-计时-一键停世界-重启" class="headerlink" title="1) GameManager：分数&#x2F;计时&#x2F;一键停世界&#x2F;重启"></a>1) GameManager：分数&#x2F;计时&#x2F;一键停世界&#x2F;重启</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="keyword">using</span> TMPro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;UI References (TMP 优先)&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> TMP_Text scoreLabel;          <span class="comment">// 分数文本</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> TMP_Text timeLabel;           <span class="comment">// 计时文本</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> GameObject gameOverPanel;     <span class="comment">// 结算面板</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Animator uiAnimator;          <span class="comment">// UI 动画（得分晕光等）</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Audio&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> AudioSource sfxScore;         <span class="comment">// 加分音效</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> AudioSource sfxGameOver;      <span class="comment">// 结束音效</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Flow&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> reloadDelay = <span class="number">0.6f</span>;     <span class="comment">// 重开延迟</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Runtime</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> score;                 <span class="comment">// 当前分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> timeAcc;             <span class="comment">// 秒表累积</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> gameOver;             <span class="comment">// 是否已结算</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Unity</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        score = <span class="number">0</span>;                                          <span class="comment">// 初始化分数为 0</span></span><br><span class="line">        timeAcc = <span class="number">0f</span>;                                       <span class="comment">// 清零秒表</span></span><br><span class="line">        gameOver = <span class="literal">false</span>;                                   <span class="comment">// 开始未结束</span></span><br><span class="line">        UpdateScoreLabel();                                 <span class="comment">// 刷一次 UI</span></span><br><span class="line">        UpdateTimeLabel(<span class="number">0</span>);                                 <span class="comment">// 刷一次时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameOver) <span class="keyword">return</span>;                               <span class="comment">// 已结束则不再计时</span></span><br><span class="line">        timeAcc += Time.deltaTime;                          <span class="comment">// 秒表累加</span></span><br><span class="line">        UpdateTimeLabel(timeAcc);                           <span class="comment">// 刷新 MM:SS</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Score &amp; Time</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddScore</span>(<span class="params"><span class="built_in">int</span> delta = <span class="number">1</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameOver) <span class="keyword">return</span>;                               <span class="comment">// 结束后不再加分</span></span><br><span class="line">        score += delta;                                     <span class="comment">// 分数累加</span></span><br><span class="line">        UpdateScoreLabel();                                 <span class="comment">// 刷 UI</span></span><br><span class="line">        uiAnimator?.SetTrigger(<span class="string">&quot;Score&quot;</span>);                    <span class="comment">// 播得分动画</span></span><br><span class="line">        <span class="keyword">if</span> (sfxScore) sfxScore.Play();                      <span class="comment">// 播音效</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateScoreLabel</span>()</span> =&gt;</span><br><span class="line">        scoreLabel.text = score.ToString();                 <span class="comment">// 直接显示数字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateTimeLabel</span>(<span class="params"><span class="built_in">float</span> seconds</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> m = Mathf.FloorToInt(seconds / <span class="number">60f</span>);            <span class="comment">// 分</span></span><br><span class="line">        <span class="built_in">int</span> s = Mathf.FloorToInt(seconds % <span class="number">60f</span>);            <span class="comment">// 秒</span></span><br><span class="line">        timeLabel.text = <span class="string">$&quot;<span class="subst">&#123;m:<span class="number">00</span>&#125;</span>:<span class="subst">&#123;s:<span class="number">00</span>&#125;</span>&quot;</span>;                  <span class="comment">// MM:SS</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> GameOver &amp; Reload</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameOver) <span class="keyword">return</span>;                               <span class="comment">// 防重复</span></span><br><span class="line">        gameOver = <span class="literal">true</span>;                                    <span class="comment">// 标记结束</span></span><br><span class="line">        sfxGameOver?.Play();                                <span class="comment">// 播音效</span></span><br><span class="line">        FreezeWorld();                                      <span class="comment">// 一键停世界</span></span><br><span class="line">        gameOverPanel?.SetActive(<span class="literal">true</span>);                     <span class="comment">// 打开结算面板</span></span><br><span class="line">        Invoke(<span class="keyword">nameof</span>(Reload), reloadDelay);                <span class="comment">// 延迟重开</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FreezeWorld</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历场景中所有 BasicMovement，将位移与旋转速度清零</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> mv <span class="keyword">in</span> <span class="title">FindObjectsOfType</span>&lt;<span class="title">BasicMovement</span>&gt;())</span></span><br><span class="line">        &#123;</span><br><span class="line">            mv.movespeed = <span class="number">0f</span>;                              <span class="comment">// 速度清零</span></span><br><span class="line">            mv.rotateSpeed = <span class="number">0f</span>;                            <span class="comment">// 旋转清零</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reload</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> idx = SceneManager.GetActiveScene().buildIndex; <span class="comment">// 当前场景索引</span></span><br><span class="line">        SceneManager.LoadScene(idx);                        <span class="comment">// 重载当前场景</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-WorldGenerator：两片段循环-Perlin-卷圆"><a href="#2-WorldGenerator：两片段循环-Perlin-卷圆" class="headerlink" title="2) WorldGenerator：两片段循环 + Perlin 卷圆"></a>2) WorldGenerator：两片段循环 + Perlin 卷圆</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WorldGenerator</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Grid Shape&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Vector2Int dimensions = <span class="keyword">new</span>(<span class="number">32</span>, <span class="number">48</span>);   <span class="comment">// x=圆周细分, y=前进细分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> scale = <span class="number">0.8f</span>;                    <span class="comment">// 网格单位间距</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Perlin&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> perlinScale = <span class="number">0.6f</span>;              <span class="comment">// 粗糙度（越大越颠）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> waveHeight = <span class="number">0.6f</span>;               <span class="comment">// 丘高</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> randomness = <span class="number">0.5f</span>;               <span class="comment">// 段间差异</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Items&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> GameObject[] obstacles;                <span class="comment">// 障碍预制体数组</span></span><br><span class="line">    <span class="keyword">public</span> GameObject gate;                       <span class="comment">// 计分门预制体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> startObstacleChance = <span class="number">5</span>;           <span class="comment">// 初始概率（1/N）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> obstacleChanceAcceleration = <span class="number">0.2f</span>; <span class="comment">// 段与段之间递增</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> gateChance = <span class="number">8</span>;                    <span class="comment">// 门的概率（1/N）</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Visibility&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> showItemDistance = <span class="number">60f</span>;          <span class="comment">// 可见距离阈值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> shadowHeight = <span class="number">0f</span>;               <span class="comment">// 阴影仅开在此高度以下</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Runtime</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;GameObject&gt; pieces = <span class="keyword">new</span>(); <span class="comment">// 当前两段</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> perlinOffset;                       <span class="comment">// Perlin 偏移</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Unity</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GenerateWorldPiece();                        <span class="comment">// 先造第一段</span></span><br><span class="line">        GenerateWorldPiece();                        <span class="comment">// 再造第二段</span></span><br><span class="line">        StartCoroutine(LoopPieces());                <span class="comment">// 循环协程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Piece Loop</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">SegmentLength</span>()</span> =&gt;</span><br><span class="line">        dimensions.y * scale * Mathf.PI;            <span class="comment">// 段长≈圆周长度（前进方向）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GenerateWorldPiece</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1) 生成圆柱网格</span></span><br><span class="line">        <span class="keyword">var</span> piece = CreateCylinderPiece();           </span><br><span class="line">        <span class="comment">// 2) 放到末尾：如果已有段，则按段长顺延</span></span><br><span class="line">        <span class="keyword">if</span> (pieces.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> last = pieces[^<span class="number">1</span>].transform;</span><br><span class="line">            piece.transform.position = last.position + Vector3.forward * SegmentLength();</span><br><span class="line">            piece.transform.rotation = last.rotation; <span class="comment">// 继承旋转，接缝平滑</span></span><br><span class="line">        &#125;</span><br><span class="line">        pieces.Add(piece);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3) 随机刷障碍/门（仅示意）</span></span><br><span class="line">        SpawnItemsOn(piece.transform);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4) 子物体加 BasicMovement，统一受控</span></span><br><span class="line">        <span class="keyword">var</span> mv = piece.AddComponent&lt;BasicMovement&gt;();</span><br><span class="line">        mv.movespeed = <span class="number">-10f</span>;                         <span class="comment">// 世界向玩家推近</span></span><br><span class="line">        mv.rotateSpeed = <span class="number">30f</span>;                        <span class="comment">// 旋转基准（可与灯光同值）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">LoopPieces</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环：当“第二段”来到相机前方时，销毁最前段并补一段</span></span><br><span class="line">        <span class="keyword">var</span> cam = Camera.main;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pieces.Count &gt;= <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> second = pieces[<span class="number">1</span>].transform;</span><br><span class="line">                <span class="keyword">if</span> (second.position.z &lt;= cam.transform.position.z)</span><br><span class="line">                &#123;</span><br><span class="line">                    Destroy(pieces[<span class="number">0</span>]);             <span class="comment">// 删最前</span></span><br><span class="line">                    pieces.RemoveAt(<span class="number">0</span>);             <span class="comment">// 出队</span></span><br><span class="line">                    GenerateWorldPiece();           <span class="comment">// 末尾再补一段</span></span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;              <span class="comment">// 让一帧，降低尖峰</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            UpdateVisibilityAndShadows();           <span class="comment">// 每帧更新可见与阴影</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Mesh &amp; Items</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> GameObject <span class="title">CreateCylinderPiece</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 生成一个包含 MeshFilter/Renderer/Collider 的圆柱片段</span></span><br><span class="line">        <span class="keyword">var</span> go = <span class="keyword">new</span> GameObject(<span class="string">&quot;World piece&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> mf = go.AddComponent&lt;MeshFilter&gt;();</span><br><span class="line">        <span class="keyword">var</span> mr = go.AddComponent&lt;MeshRenderer&gt;();</span><br><span class="line">        <span class="keyword">var</span> mc = go.AddComponent&lt;MeshCollider&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顶点/三角</span></span><br><span class="line">        <span class="keyword">var</span> mesh = <span class="keyword">new</span> Mesh &#123; name = <span class="string">&quot;CylinderSegment&quot;</span> &#125;;</span><br><span class="line">        mf.sharedMesh = mesh;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按平面→卷圆思路填充网格</span></span><br><span class="line">        BuildCylinderMesh(mesh);</span><br><span class="line"></span><br><span class="line">        mc.sharedMesh = mesh;</span><br><span class="line">        <span class="keyword">return</span> go;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildCylinderMesh</span>(<span class="params">Mesh mesh</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算参数</span></span><br><span class="line">        <span class="built_in">int</span> xCount = dimensions.x;                       <span class="comment">// 圆周细分</span></span><br><span class="line">        <span class="built_in">int</span> zCount = dimensions.y;                       <span class="comment">// 前进细分</span></span><br><span class="line">        <span class="built_in">float</span> r = xCount * scale * <span class="number">0.5f</span>;                 <span class="comment">// 半径</span></span><br><span class="line">        <span class="keyword">var</span> verts = <span class="keyword">new</span> Vector3[(xCount + <span class="number">1</span>) * (zCount + <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">var</span> tris  = <span class="keyword">new</span> <span class="built_in">int</span>[xCount * zCount * <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顶点：先建平面，再“卷圆”</span></span><br><span class="line">        <span class="built_in">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> z = <span class="number">0</span>; z &lt;= zCount; z++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt;= xCount; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">float</span> theta = (x / (<span class="built_in">float</span>)xCount) * Mathf.PI * <span class="number">2f</span>; <span class="comment">// 角度</span></span><br><span class="line">                <span class="comment">// 平面坐标</span></span><br><span class="line">                <span class="built_in">float</span> px = r * Mathf.Cos(theta);</span><br><span class="line">                <span class="built_in">float</span> pz = r * Mathf.Sin(theta);</span><br><span class="line">                <span class="built_in">float</span> py = <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Perlin 噪声沿“朝圆心方向”推一个位移，形成草丘</span></span><br><span class="line">                <span class="built_in">float</span> nx = (px + perlinOffset) * perlinScale;</span><br><span class="line">                <span class="built_in">float</span> nz = (pz + perlinOffset) * perlinScale;</span><br><span class="line">                <span class="built_in">float</span> noise = Mathf.PerlinNoise(nx, nz) * waveHeight;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> center = Vector3.zero;</span><br><span class="line">                <span class="keyword">var</span> dirIn  = (center - <span class="keyword">new</span> Vector3(px, py, pz)).normalized;</span><br><span class="line">                <span class="keyword">var</span> pos    = <span class="keyword">new</span> Vector3(px, py, pz) + dirIn * noise;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 前进方向用 z 计数形成“长度≈π*zCount*scale”</span></span><br><span class="line">                pos += Vector3.forward * (z * scale * Mathf.PI);</span><br><span class="line"></span><br><span class="line">                verts[idx++] = pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三角索引</span></span><br><span class="line">        <span class="built_in">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> z = <span class="number">0</span>; z &lt; zCount; z++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; xCount; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> i0 = z * (xCount + <span class="number">1</span>) + x;</span><br><span class="line">                <span class="built_in">int</span> i1 = i0 + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">int</span> i2 = i0 + (xCount + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">int</span> i3 = i2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                tris[t++] = i0; tris[t++] = i2; tris[t++] = i1;</span><br><span class="line">                tris[t++] = i1; tris[t++] = i2; tris[t++] = i3;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mesh.Clear();</span><br><span class="line">        mesh.vertices  = verts;</span><br><span class="line">        mesh.triangles = tris;</span><br><span class="line">        mesh.RecalculateNormals();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 偏移迭代：下一段会不同</span></span><br><span class="line">        perlinOffset += randomness;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpawnItemsOn</span>(<span class="params">Transform piece</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 简化：仅示范“1/N 概率”刷障碍/门，并把实例作为 piece 的子物体</span></span><br><span class="line">        <span class="built_in">int</span> obstacleChance = Mathf.Max(<span class="number">1</span>, startObstacleChance);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)                         <span class="comment">// 每段少量刷点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Random.Range(<span class="number">1</span>, obstacleChance + <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; obstacles.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> prefab = obstacles[Random.Range(<span class="number">0</span>, obstacles.Length)];</span><br><span class="line">                <span class="keyword">var</span> p = Instantiate(prefab, piece);</span><br><span class="line">                p.tag = <span class="string">&quot;Item&quot;</span>;</span><br><span class="line">                p.transform.localPosition = <span class="keyword">new</span> Vector3(<span class="number">0f</span>, <span class="number">0f</span>, i * (SegmentLength() / <span class="number">6f</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Random.Range(<span class="number">1</span>, gateChance + <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; gate)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> g = Instantiate(gate, piece);</span><br><span class="line">                g.tag = <span class="string">&quot;Item&quot;</span>;</span><br><span class="line">                g.transform.localPosition = <span class="keyword">new</span> Vector3(<span class="number">0f</span>, <span class="number">0f</span>, i * (SegmentLength() / <span class="number">6f</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 让概率随段增长而变“更容易生成”</span></span><br><span class="line">        startObstacleChance = Mathf.Max(<span class="number">1</span>, Mathf.RoundToInt(startObstacleChance - obstacleChanceAcceleration));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Visibility &amp; Shadow</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateVisibilityAndShadows</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 只显示近处物体；只给下半圆的物体开阴影</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> r <span class="keyword">in</span> <span class="title">FindObjectsOfType</span>&lt;<span class="title">Renderer</span>&gt;())</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!r || !r.transform.CompareTag(<span class="string">&quot;Item&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">bool</span> visible = (r.transform.position.z - Camera.main.transform.position.z) &lt; showItemDistance;</span><br><span class="line">            r.enabled = visible;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 阴影：仅当 y &lt; shadowHeight 时才投影</span></span><br><span class="line">            r.shadowCastingMode = (r.transform.position.y &lt;= shadowHeight)</span><br><span class="line">                ? UnityEngine.Rendering.ShadowCastingMode.On</span><br><span class="line">                : UnityEngine.Rendering.ShadowCastingMode.Off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-BasicMovement：统一世界-灯光的前进与旋转"><a href="#3-BasicMovement：统一世界-灯光的前进与旋转" class="headerlink" title="3) BasicMovement：统一世界&#x2F;灯光的前进与旋转"></a>3) BasicMovement：统一世界&#x2F;灯光的前进与旋转</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BasicMovement</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> movespeed = <span class="number">-10f</span>;     <span class="comment">// 负值=世界向玩家推近</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> rotateSpeed = <span class="number">30f</span>;    <span class="comment">// 旋转速度（世界与灯光可同值）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> lamp = <span class="literal">false</span>;          <span class="comment">// 若为灯光，旋转轴不同</span></span><br><span class="line">    <span class="keyword">public</span> Transform carTransform;     <span class="comment">// 读取车体转角，制造滚动感</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> rotationAngle = <span class="number">30</span>;     <span class="comment">// 车体最大转角（归一化用）</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Unity</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 沿前进方向统一平移</span></span><br><span class="line">        transform.Translate(Vector3.forward * movespeed * Time.deltaTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据车体转角给世界/灯光一个与之成比例的旋转</span></span><br><span class="line">        <span class="keyword">if</span> (carTransform)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">float</span> y = carTransform.localEulerAngles.y;</span><br><span class="line">            <span class="keyword">if</span> (y &gt; rotationAngle * <span class="number">2f</span>) y = (<span class="number">360</span> - y) * <span class="number">-1f</span>;   <span class="comment">// 归一化到 [-?, ?]</span></span><br><span class="line">            <span class="built_in">float</span> k = y / rotationAngle;                       <span class="comment">// 比例系数</span></span><br><span class="line">            Vector3 axis = lamp ? Vector3.right : Vector3.forward;</span><br><span class="line">            transform.Rotate(axis * -rotateSpeed * k * Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Car：双输入、轮胎同步、草屑-胎印、离地下压力"><a href="#4-Car：双输入、轮胎同步、草屑-胎印、离地下压力" class="headerlink" title="4) Car：双输入、轮胎同步、草屑&#x2F;胎印、离地下压力"></a>4) Car：双输入、轮胎同步、草屑&#x2F;胎印、离地下压力</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Car</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Wheels&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> WheelCollider[] wheelColliders;   <span class="comment">// 物理轮胎</span></span><br><span class="line">    <span class="keyword">public</span> Transform[] wheelMeshes;          <span class="comment">// 可见轮胎</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> wheelRotateSpeed = <span class="number">360f</span>;    <span class="comment">// 视觉滚动</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Steer&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> rotationAngle = <span class="number">30</span>;           <span class="comment">// 最大目标转角</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> rotateSpeed = <span class="number">180f</span>;         <span class="comment">// 插值速度</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Effects&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> ParticleSystem grassFx;           <span class="comment">// 草屑</span></span><br><span class="line">    <span class="keyword">public</span> Transform[] skidPivots;           <span class="comment">// 胎印生成点</span></span><br><span class="line">    <span class="keyword">public</span> GameObject skidPrefab;            <span class="comment">// 胎印预制体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> skidInterval = <span class="number">0.12f</span>;       <span class="comment">// 胎印节流</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> skidSize = <span class="number">1.0f</span>;            <span class="comment">// 胎印大小</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Downforce&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Transform back;                   <span class="comment">// 车尾位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> constantBackForce = <span class="number">60f</span>;    <span class="comment">// 向下力</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;WorldRef&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> WorldGenerator generator;         <span class="comment">// 供归属胎印</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Runtime</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> targetRotation;              <span class="comment">// 目标转角</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> onGround;                   <span class="comment">// 是否着地</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> skidRoutineOn;              <span class="comment">// 是否画胎印</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Unity</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(SkidRoutine());       <span class="comment">// 启动胎印协程（按开关节流）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1) 轮胎 Mesh 对齐 Collider</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; wheelColliders.Length &amp;&amp; i &lt; wheelMeshes.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            wheelColliders[i].GetWorldPose(<span class="keyword">out</span> <span class="keyword">var</span> pos, <span class="keyword">out</span> <span class="keyword">var</span> rot);</span><br><span class="line">            wheelMeshes[i].SetPositionAndRotation(pos, rot);</span><br><span class="line">            wheelMeshes[i].Rotate(Vector3.right * Time.deltaTime * wheelRotateSpeed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2) 输入 → 目标转角</span></span><br><span class="line">        UpdateTargetRotation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3) 旋转插值</span></span><br><span class="line">        <span class="keyword">var</span> euler = <span class="keyword">new</span> Vector3(transform.localEulerAngles.x, targetRotation, transform.localEulerAngles.z);</span><br><span class="line">        transform.rotation = Quaternion.RotateTowards(transform.rotation, Quaternion.Euler(euler), rotateSpeed * Time.deltaTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4) 简易地面检测（两后轮 Raycast）</span></span><br><span class="line">        onGround = RearGrounded();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5) 草屑/胎印逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (onGround) &#123; <span class="keyword">if</span> (!grassFx.isPlaying) grassFx.Play(); &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="keyword">if</span> (grassFx.isPlaying) grassFx.Stop(); &#125;</span><br><span class="line"></span><br><span class="line">        skidRoutineOn = onGround &amp;&amp; Mathf.Abs(targetRotation) &gt; rotationAngle * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6) 离地下压力（两后轮皆离地时更显著）</span></span><br><span class="line">        <span class="keyword">if</span> (!onGround &amp;&amp; back)</span><br><span class="line">        &#123;</span><br><span class="line">            GetComponent&lt;Rigidbody&gt;().AddForceAtPosition(Vector3.down * constantBackForce, back.position, ForceMode.Force);</span><br><span class="line">            skidRoutineOn = <span class="literal">false</span>; <span class="comment">// 空中不画胎印</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Input &amp; Helpers</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateTargetRotation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);           <span class="comment">// 键盘/手柄水平轴</span></span><br><span class="line">        <span class="keyword">if</span> (Mathf.Abs(h) &gt; <span class="number">0.01f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            targetRotation = Mathf.RoundToInt(rotationAngle * h);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))                     <span class="comment">// 鼠标左键按住→左右半屏</span></span><br><span class="line">        &#123;</span><br><span class="line">            targetRotation = (Input.mousePosition.x &gt; Screen.width * <span class="number">0.5f</span>) ? rotationAngle : -rotationAngle;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        targetRotation = <span class="number">0</span>;                              <span class="comment">// 无输入回正</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">RearGrounded</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 可替换为轮胎触地状态；这里示例用 Raycast</span></span><br><span class="line">        <span class="built_in">int</span> hits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> w <span class="keyword">in</span> wheelMeshes)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Physics.Raycast(w.position, Vector3.down, <span class="keyword">out</span> _, <span class="number">0.3f</span>)) hits++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hits &gt;= <span class="number">2</span>; <span class="comment">// 至少两后轮命中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">SkidRoutine</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params">skidInterval</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (!skidRoutineOn || skidPrefab == <span class="literal">null</span> || skidPivots == <span class="literal">null</span> || generator == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> skidPivots)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> go = Instantiate(skidPrefab, p.position, p.rotation);</span><br><span class="line">                <span class="comment">// 关键：胎印作为“当前世界片段”的子物体，保证相对滑移正确</span></span><br><span class="line">                go.transform.SetParent(generator.transform, <span class="literal">true</span>);</span><br><span class="line">                go.transform.localScale = <span class="keyword">new</span> Vector3(<span class="number">1f</span>, <span class="number">1f</span>, <span class="number">4f</span>) * skidSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> API</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FallApart</span>(<span class="params">GameObject ragdollPrefab</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ragdollPrefab) <span class="keyword">return</span>;</span><br><span class="line">        Instantiate(ragdollPrefab, transform.position, transform.rotation); <span class="comment">// 生成残骸</span></span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);                                        <span class="comment">// 隐藏整车</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-CameraFollow：启动期低阻尼-首次输入恢复"><a href="#5-CameraFollow：启动期低阻尼-首次输入恢复" class="headerlink" title="5) CameraFollow：启动期低阻尼 &amp; 首次输入恢复"></a>5) CameraFollow：启动期低阻尼 &amp; 首次输入恢复</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraFollow</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    <span class="keyword">public</span> Transform target;              <span class="comment">// 跟随目标（车）</span></span><br><span class="line">    <span class="keyword">public</span> Transform lookAt;              <span class="comment">// 注视点（车头/偏前）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> distance = <span class="number">10f</span>;          <span class="comment">// 距离</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> height = <span class="number">3f</span>;             <span class="comment">// 高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> rotationDamping = <span class="number">3f</span>;    <span class="comment">// 常规阻尼</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> startDamping = <span class="number">0.1f</span>;     <span class="comment">// 启动期低阻尼</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Runtime</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> originalDamping;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> firstInputTriggered;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Unity</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        originalDamping = rotationDamping;    <span class="comment">// 记录原值</span></span><br><span class="line">        rotationDamping = startDamping;       <span class="comment">// 启动期更“黏”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 监听玩家首次输入，恢复正常阻尼</span></span><br><span class="line">        <span class="keyword">if</span> (!firstInputTriggered &amp;&amp;</span><br><span class="line">            (Mathf.Abs(Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>)) &gt; <span class="number">0.01f</span> || Input.GetMouseButtonDown(<span class="number">0</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            rotationDamping = originalDamping;</span><br><span class="line">            firstInputTriggered = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1) 目标位置</span></span><br><span class="line">        Vector3 wantedPos = target.position - target.forward * distance + Vector3.up * height;</span><br><span class="line">        transform.position = Vector3.Lerp(transform.position, wantedPos, Time.deltaTime * rotationDamping);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2) 注视目标</span></span><br><span class="line">        <span class="keyword">if</span> (lookAt) transform.rotation = Quaternion.Slerp(transform.rotation,</span><br><span class="line">            Quaternion.LookRotation(lookAt.position - transform.position), Time.deltaTime * rotationDamping);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Gate-Obstacle-翻车触发"><a href="#6-Gate-Obstacle-翻车触发" class="headerlink" title="6) Gate &#x2F; Obstacle &#x2F; 翻车触发"></a>6) Gate &#x2F; Obstacle &#x2F; 翻车触发</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gate.cs</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Gate</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    <span class="keyword">public</span> GameManager gm;</span><br><span class="line">    <span class="keyword">public</span> AudioSource sfx;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!other.transform.root.CompareTag(<span class="string">&quot;Player&quot;</span>)) <span class="keyword">return</span>; <span class="comment">// 只认玩家</span></span><br><span class="line">        gm?.AddScore(<span class="number">1</span>);                                       <span class="comment">// 加分</span></span><br><span class="line">        <span class="keyword">if</span> (sfx) sfx.Play();                                   <span class="comment">// 播音</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Obstacle.cs</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Obstacle</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    <span class="keyword">public</span> GameManager gm;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!collision.transform.root.CompareTag(<span class="string">&quot;Player&quot;</span>)) <span class="keyword">return</span>;  <span class="comment">// 只认玩家</span></span><br><span class="line">        gm?.GameOver();                                              <span class="comment">// 游戏结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CarGameOverTrigger.cs（车顶小圆触发器判翻车）</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CarGameOverTrigger</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">    <span class="keyword">public</span> GameManager gm;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!other.name.Contains(<span class="string">&quot;World piece&quot;</span>)) <span class="keyword">return</span>; <span class="comment">// 简单命名匹配</span></span><br><span class="line">        gm?.GameOver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、参数手册"><a href="#五、参数手册" class="headerlink" title="五、参数手册"></a>五、参数手册</h2><h3 id="WorldGenerator"><a href="#WorldGenerator" class="headerlink" title="WorldGenerator"></a>WorldGenerator</h3><ul><li><code>dimensions</code>：<code>x</code> 决定圆滑程度，<code>y</code> 影响“段长 &#x3D; y * scale * π”。</li><li><code>scale</code>：网格密度与视觉“像素”。</li><li><code>perlinScale</code>：地形粗糙度（越大起伏越频繁）。</li><li><code>waveHeight</code>：丘高。</li><li><code>randomness</code>：段间差异度。</li><li><code>startObstacleChance / obstacleChanceAcceleration / gateChance</code>：障碍&#x2F;门的概率（用“1&#x2F;N”表述，数值越大越稀）。</li><li><code>showItemDistance / shadowHeight</code>：只显示近处、只给下半圆投影。</li></ul><h3 id="BasicMovement"><a href="#BasicMovement" class="headerlink" title="BasicMovement"></a>BasicMovement</h3><ul><li><code>movespeed</code>：世界统一前进（通常为负值）。</li><li><code>rotateSpeed</code>：滚动错觉强弱；灯光与世界可用相同基准。</li><li><code>rotationAngle</code>：与车体转角配合，决定滚动的“灵敏度”。</li></ul><h3 id="Car"><a href="#Car" class="headerlink" title="Car"></a>Car</h3><ul><li><code>rotationAngle / rotateSpeed</code>：手感的“灵敏+稳定”平衡。</li><li><code>wheelRotateSpeed</code>：视觉轮胎快慢。</li><li><code>skidInterval / skidSize</code>：胎印节奏与大小。</li><li><code>constantBackForce</code>：离地下压力大小。</li></ul><h3 id="CameraFollow"><a href="#CameraFollow" class="headerlink" title="CameraFollow"></a>CameraFollow</h3><ul><li><code>startDamping</code>：启动期阻尼（小&#x3D;更黏，避免突变）。</li><li><code>rotationDamping</code>：常规阻尼（跟拍稳定性）。</li><li><code>distance / height</code>：机位。</li></ul><blockquote><p><strong>快速配方</strong>：<code>dimensions=(32,48), scale=0.8, perlinScale≈0.6, waveHeight≈0.6, movespeed≈-10, rotateSpeed≈30</code>。<br>想“更漂移”：<code>perlinScale</code> 提到 <code>0.9~1.2</code>、<code>waveHeight</code> 提到 <code>0.8+</code>，相机 <code>rotationDamping</code> 略降。</p></blockquote><hr><h2 id="六、落地步骤"><a href="#六、落地步骤" class="headerlink" title="六、落地步骤"></a>六、落地步骤</h2><ol><li><p><strong>场景搭好</strong>：主摄像机、车（含 Rigidbody+WheelCollider+Mesh 对齐）、灯光、<code>GameManager</code>、<code>WorldGenerator</code>。</p></li><li><p><strong>UI（TMP）</strong>：把分数与时间字段连到 <code>TMP_Text</code>；确认字体资产就绪。</p></li><li><p><strong>预制体</strong>：<code>Gate</code>（小触发盒 + 实碰撞体）、<code>Obstacle_Spike</code>；统一打 <code>Item</code>。</p></li><li><p><strong>脚本挂载</strong>：</p><ul><li>车：<code>Car</code>（填好 Wheels、特效、WorldRef）。</li><li>世界：<code>WorldGenerator</code>（填好预制体、参数）。</li><li>摄像机：<code>CameraFollow</code>（Target&#x2F;LookAt）。</li><li>Gate&#x2F;Obstacle：分别连 <code>GameManager</code>。</li></ul></li><li><p><strong>标签</strong>：车根对象标 <code>Player</code>；动态物体打 <code>Item</code>。</p></li><li><p><strong>播放</strong>：左右半屏&#x2F;方向键转向，穿门加分，撞障&#x2F;翻车结算 → 0.6s 重开。</p></li></ol><hr><h2 id="七、性能与稳定性"><a href="#七、性能与稳定性" class="headerlink" title="七、性能与稳定性"></a>七、性能与稳定性</h2><ul><li><strong>两片段上限</strong>：永远只保留两段世界；换段放协程里 <strong><code>yield return null</code></strong> 减峰值。</li><li><strong>可见性&#x2F;阴影</strong>：只渲染近处，阴影只给下半圆，消灭“幽灵影子”。</li><li><strong>一键停世界</strong>：GameOver 遍历 <code>BasicMovement</code>，清零 move&#x2F;rotate，避免“漏停”。</li><li><strong>TMP 优先</strong>：文本统一用 TMP；旧 <code>Text</code> 仅兜底（迁移时最容易 Null）。</li><li><strong>轮胎顺序</strong>：<code>WheelCollider[]</code> 与 <code>wheelMeshes[]</code> 必须一一对应。</li></ul><hr><h2 id="八、排错表"><a href="#八、排错表" class="headerlink" title="八、排错表"></a>八、排错表</h2><table><thead><tr><th>现象</th><th>常见原因</th><th>处理方式</th></tr></thead><tbody><tr><td>分数&#x2F;时间不更新</td><td>绑定的是旧 <code>Text</code> 或字段未连上</td><td>改用 <code>TMP_Text</code> 并重新拖拽引用</td></tr><tr><td>撞上 Gate 也 +1</td><td>Gate 触发盒过大&#x2F;未居中</td><td>缩小触发盒、居中，保留实体碰撞体仅用于被撞反应</td></tr><tr><td>世界不“滚”</td><td>灯光未挂 <code>BasicMovement</code> 或车体未赋值</td><td>给灯光也挂脚本；<code>carTransform</code> 指向车体</td></tr><tr><td>接缝有“台阶”</td><td>段长&#x2F;旋转未继承或网格细分过低</td><td>继承 rotation；适当加大 <code>dimensions.y</code></td></tr><tr><td>胎印漂移错位</td><td>胎印未挂到当前世界片段</td><td>生成后 <code>SetParent(generator.transform, true)</code></td></tr><tr><td>翻车不触发</td><td>名称&#x2F;Layer 不匹配</td><td>用 Layer&#x2F;Tag 代替“包含名”判断更稳</td></tr></tbody></table><hr><h2 id="九、扩展路线"><a href="#九、扩展路线" class="headerlink" title="九、扩展路线"></a>九、扩展路线</h2><ul><li><strong>难度带</strong>：随分数&#x2F;时间调整 <code>gateChance / startObstacleChance / obstacleChanceAcceleration</code>，做“阶梯上行”。</li><li><strong>内容规则器</strong>：按“坡度&#x2F;曲率&#x2F;速度”决定障碍与 Gate 的组合，做轻量 <strong>Rule-Based</strong> 刷法。</li><li><strong>输入融合</strong>：移动端加陀螺仪；PC 保留半屏&#x2F;键盘兜底。</li><li><strong>表现升级</strong>：胎印长度&#x2F;透明度与“侧滑角×速度”联动；相机微抖&#x2F;动态 FOV。</li><li><strong>数据打点</strong>：记录“死亡原因&#x2F;位置&#x2F;速度”，为关卡概率与摆放优化提供证据。</li><li><strong>可视化调参</strong>：把关键参数打包为 <code>ScriptableObject</code>（如 <code>GameBalance.asset</code>），写个自定义 Inspector。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>把复杂留给<strong>世界（生成+运动）</strong>，把简单留给<strong>手感（车+相机）</strong>。<br>两片段循环让资源与逻辑都保持极简；车体输入与特效在稳定框架里“随需加料”；<code>GameManager</code> 把分数、时间、结算与重启串成闭环。</p><!-- 这就是一个**能玩、能讲、能扩展**的 Procedural Racing。后续如果要做“参数图鉴 + 可视化面板”或“移动端手势灵敏度曲线”，这套骨架可以直接接上。 -->]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> Unity </category>
          
          <category> 游戏架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Procedural Generation </tag>
            
            <tag> Perlin Noise </tag>
            
            <tag> Endless Runner </tag>
            
            <tag> WheelCollider </tag>
            
            <tag> 协程分帧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flappy Bird 可热更化实战：C# → XLua 迁移</title>
      <link href="/2025/08/07/Flappy-Bird-XLua-Migration/"/>
      <url>/2025/08/07/Flappy-Bird-XLua-Migration/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标：把传统 C# 玩法完整迁到脚本热更新架构，做到“<strong>玩法用 Lua 快速迭代</strong>、<strong>C# 只做稳定桥接</strong>”，并可平滑切换到 Addressables 远程脚本加载。<br>仓库：<a href="https://github.com/xiaoyunhai0/flappy_bird_xlua-">https://github.com/xiaoyunhai0/flappy_bird_xlua-</a></p></blockquote><span id="more"></span><h2 id="一、项目概览"><a href="#一、项目概览" class="headerlink" title="一、项目概览"></a>一、项目概览</h2><ul><li><p><strong>边界划分</strong></p><ul><li><strong>C#（Bridge）</strong>：生命周期转发、依赖注入、加载器、平台差异、AOT 配置。</li><li><strong>Lua（Gameplay）</strong>：输入、重力&#x2F;位姿、管道生成与<strong>对象池</strong>、计分&#x2F;死亡、UI 同步、背景滚动。</li></ul></li><li><p><strong>性能策略</strong>：<strong>对象池复用</strong>、<strong>跨语言类型局部缓存</strong>、<strong>GC Tick 秒级节流</strong>、<strong>DOTween Sequence 替协程</strong>。</p></li><li><p><strong>兼容策略</strong>：优先 <code>TMP_Text</code>，自动回落 <code>UI.Text</code>。</p></li><li><p><strong>上线策略</strong>：本地 <code>Resources</code> → 可切换 <strong>Addressables 远程 Loader</strong>；IL2CPP 用 <code>link.xml</code> 与白名单保活。</p></li></ul><hr><h2 id="二、目录结构与迁移策略"><a href="#二、目录结构与迁移策略" class="headerlink" title="二、目录结构与迁移策略"></a>二、目录结构与迁移策略</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Assets/</span><br><span class="line">├─ Scripts_Bird/                    # 旧 C# 玩法（保留用于对齐&amp;回滚）</span><br><span class="line">│  ├─ GameManager.cs</span><br><span class="line">│  ├─ Player.cs</span><br><span class="line">│  ├─ Pipes.cs</span><br><span class="line">│  ├─ Spawner.cs</span><br><span class="line">│  └─ Parallax.cs</span><br><span class="line">├─ Resources/</span><br><span class="line">│  └─ Lua/</span><br><span class="line">│     ├─ flappy_bird.lua.txt       # 主玩法（鸟/生成/计分/UI）</span><br><span class="line">│     └─ util.lua.txt              # 通用工具（TMP/Text 兼容等）</span><br><span class="line">└─ Runtime/Lua/</span><br><span class="line">   ├─ WidgetLuaBehaviour.cs        # C#↔Lua 桥（生命周期/注入/GC/Loader）</span><br><span class="line">   ├─ GenConfig.cs                 # xLua 暴露/回调类型配置</span><br><span class="line">   └─ link.xml                     # IL2CPP 剪裁保活</span><br></pre></td></tr></table></figure><blockquote><p>策略：先<strong>并行</strong>（C# 与 Lua 共存）→ 体验对齐 → 逐步下线旧 C#；全程可回滚。</p></blockquote><hr><h2 id="三、运行时数据流与分层"><a href="#三、运行时数据流与分层" class="headerlink" title="三、运行时数据流与分层"></a>三、运行时数据流与分层</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UI（TMP_Text / Button）</span><br><span class="line">  └─ Lua 玩法（flappy_bird.lua / util.lua）</span><br><span class="line">      └─ C# 桥（WidgetLuaBehaviour：生命周期/注入/Loader/GC）</span><br><span class="line">          └─ 引擎（Transform / Physics2D / DOTween）</span><br><span class="line">              └─ 系统（MonoBehaviour / Time / Input）</span><br></pre></td></tr></table></figure><ul><li><strong>Awake</strong>：C# 创建 <code>LuaEnv + LuaTable</code>，注入 <code>self</code> 与 <code>Injection[]</code>，<code>DoString()</code> 执行 Lua。</li><li><strong>Start&#x2F;Update&#x2F;OnEnable&#x2F;…</strong>：C# 缓存同名 Lua 函数并逐帧转发。</li><li><strong>Lua</strong>：统一输入→速度&#x2F;位姿；<strong>Sequence</strong> 驱动帧动画与生成；<strong>对象池</strong>复用管道；文本优先 <strong>TMP</strong>，回落 <strong>Text</strong>。</li></ul><hr><h2 id="四、C-→Lua-桥（核心节选：Runtime-Lua-WidgetLuaBehaviour-cs）"><a href="#四、C-→Lua-桥（核心节选：Runtime-Lua-WidgetLuaBehaviour-cs）" class="headerlink" title="四、C#→Lua 桥（核心节选：Runtime/Lua/WidgetLuaBehaviour.cs）"></a>四、C#→Lua 桥（核心节选：<code>Runtime/Lua/WidgetLuaBehaviour.cs</code>）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: WidgetLuaBehaviour.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> using</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">using</span> DG.Tweening;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Project.Runtime.Lua</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> XLua Expose Types</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Gen</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">LuaCallCSharp</span>] <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; LuaCallTypes = <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">typeof</span>(GameObject), <span class="keyword">typeof</span>(Transform),</span><br><span class="line">            <span class="keyword">typeof</span>(Vector2), <span class="keyword">typeof</span>(Vector3), <span class="keyword">typeof</span>(Quaternion),</span><br><span class="line">            <span class="keyword">typeof</span>(Time), <span class="keyword">typeof</span>(Debug),</span><br><span class="line">            <span class="keyword">typeof</span>(TMPro.TextMeshProUGUI), <span class="keyword">typeof</span>(TMPro.TextMeshPro),</span><br><span class="line">            <span class="keyword">typeof</span>(DOVirtual), <span class="keyword">typeof</span>(Tween), <span class="keyword">typeof</span>(Sequence), <span class="keyword">typeof</span>(Tweener)</span><br><span class="line">        &#125;;</span><br><span class="line">        [<span class="meta">CSharpCallLua</span>] <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">LuaAction</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Serializable</span>] <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Injection</span> &#123; <span class="keyword">public</span> <span class="built_in">string</span> name; <span class="keyword">public</span> UnityEngine.Object <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">WidgetLuaBehaviour</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Inspector</span></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">string</span> resourcesPath = <span class="string">&quot;Lua/flappy_bird&quot;</span>;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> TextAsset luaScript;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Injection[] injections;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> LuaEnv &amp; Cache</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> LuaEnv Env = <span class="keyword">new</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> GcInterval = <span class="number">1f</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> _lastGc;</span><br><span class="line">        <span class="keyword">private</span> LuaTable _env;</span><br><span class="line">        <span class="keyword">private</span> Action _onStart, _onUpdate, _onEnable, _onDisable, _onDestroy, _onAwake;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Unity Lifecycle</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Env.AddLoader(CustomLoader);</span><br><span class="line"></span><br><span class="line">            luaScript ??= Resources.Load&lt;TextAsset&gt;(resourcesPath);</span><br><span class="line">            <span class="keyword">if</span> (!luaScript) &#123; Debug.LogError(<span class="string">&quot;Lua script missing.&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">            _env = Env.NewTable();</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> meta = Env.NewTable();</span><br><span class="line">            meta.Set(<span class="string">&quot;__index&quot;</span>, Env.Global);</span><br><span class="line">            _env.SetMetaTable(meta);</span><br><span class="line"></span><br><span class="line">            _env.Set(<span class="string">&quot;self&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (injections != <span class="literal">null</span>) <span class="keyword">foreach</span> (<span class="keyword">var</span> it <span class="keyword">in</span> injections) _env.Set(it.name, it.<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">            Env.DoString(luaScript.text, luaScript.name, _env);</span><br><span class="line">            _onAwake   = _env.Get&lt;Action&gt;(<span class="string">&quot;Awake&quot;</span>);</span><br><span class="line">            _onStart   = _env.Get&lt;Action&gt;(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">            _onUpdate  = _env.Get&lt;Action&gt;(<span class="string">&quot;Update&quot;</span>);</span><br><span class="line">            _onEnable  = _env.Get&lt;Action&gt;(<span class="string">&quot;OnEnable&quot;</span>);</span><br><span class="line">            _onDisable = _env.Get&lt;Action&gt;(<span class="string">&quot;OnDisable&quot;</span>);</span><br><span class="line">            _onDestroy = _env.Get&lt;Action&gt;(<span class="string">&quot;OnDestroy&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _onAwake?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>     =&gt; _onStart?.Invoke();</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span>  =&gt; _onEnable?.Invoke();</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span> =&gt; _onDisable?.Invoke();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _onUpdate?.Invoke();</span><br><span class="line">            <span class="keyword">if</span> (Time.time - _lastGc &gt; GcInterval) &#123; Env.Tick(); _lastGc = Time.time; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _onDestroy?.Invoke();</span><br><span class="line">            _onStart = _onUpdate = _onEnable = _onDisable = _onDestroy = _onAwake = <span class="literal">null</span>;</span><br><span class="line">            _env?.Dispose(); _env = <span class="literal">null</span>; injections = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Loader（示例：固定加载 util，可换 Addressables）</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">CustomLoader</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ta = Resources.Load&lt;TextAsset&gt;(<span class="string">&quot;Lua/util&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ta ? System.Text.Encoding.UTF8.GetBytes(ta.text) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、Lua-玩法（对象池-无-GC-UI-兼容）"><a href="#五、Lua-玩法（对象池-无-GC-UI-兼容）" class="headerlink" title="五、Lua 玩法（对象池 + 无 GC + UI 兼容）"></a>五、Lua 玩法（对象池 + 无 GC + UI 兼容）</h2><p><strong><code>Resources/Lua/util.lua.txt</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- File: util.lua</span></span><br><span class="line"><span class="keyword">local</span> TMP_Text = CS.TMPro.TMP_Text</span><br><span class="line"><span class="keyword">local</span> LegacyText = CS.UnityEngine.UI.Text</span><br><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.SetText</span><span class="params">(go, val)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> go <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tmp = go:GetComponent(typeof(TMP_Text))</span><br><span class="line">    <span class="keyword">if</span> tmp <span class="keyword">then</span> tmp.text = <span class="built_in">tostring</span>(val); <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> ui = go:GetComponent(typeof(LegacyText))</span><br><span class="line">    <span class="keyword">if</span> ui  <span class="keyword">then</span> ui.text  = <span class="built_in">tostring</span>(val); <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><p><strong><code>Resources/Lua/flappy_bird.lua.txt</code>（节选）</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- File: flappy_bird.lua</span></span><br><span class="line"><span class="keyword">local</span> U        = <span class="built_in">require</span> <span class="string">&quot;util&quot;</span></span><br><span class="line"><span class="keyword">local</span> UE       = CS.UnityEngine</span><br><span class="line"><span class="keyword">local</span> V3, V2   = UE.Vector3, UE.Vector2</span><br><span class="line"><span class="keyword">local</span> Time     = UE.Time</span><br><span class="line"><span class="keyword">local</span> DOTween  = CS.DG.Tweening.DOTween</span><br><span class="line"></span><br><span class="line"><span class="comment">-- #region 注入对象（由 C# Inspector 提供）</span></span><br><span class="line">Bird = Bird; Spawner = Spawner; prefab = prefab</span><br><span class="line">scoreText = scoreText; playBtn = playBtn; gameOver = gameOver</span><br><span class="line">Background = Background; Ground = Ground</span><br><span class="line">Sprites1, Sprites2, Sprites3 = Sprites1, Sprites2, Sprites3</span><br><span class="line"><span class="comment">-- #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- #region 运行数据（局部缓存，减少分配）</span></span><br><span class="line"><span class="keyword">local</span> spriteIndex, sprites = <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> direction = V3.zero</span><br><span class="line"><span class="keyword">local</span> gravity, strength = <span class="number">-9.8</span>, <span class="number">5.0</span></span><br><span class="line"><span class="keyword">local</span> animBg, animGround = <span class="number">0.05</span>, <span class="number">1.0</span></span><br><span class="line"><span class="keyword">local</span> spawnRate, minH, maxH = <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">2.0</span></span><br><span class="line"><span class="keyword">local</span> speed, leftEdge = <span class="number">5.0</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> cached, score = &#123;&#125;, <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> clicked, isOver = <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line"><span class="keyword">local</span> sr, mrBg, mrG = <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> seqAnim, seqSpawn = <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Awake</span><span class="params">()</span></span> clicked = <span class="literal">false</span>; Pause() <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Start</span><span class="params">()</span></span> leftEdge = UE.Camera.main:ScreenToWorldPoint(V3.zero).x - <span class="number">1.0</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnEnable</span><span class="params">()</span></span></span><br><span class="line">    sr   = Bird:GetComponent(<span class="string">&#x27;SpriteRenderer&#x27;</span>)</span><br><span class="line">    mrBg = Background:GetComponent(<span class="string">&#x27;MeshRenderer&#x27;</span>)</span><br><span class="line">    mrG  = Ground:GetComponent(<span class="string">&#x27;MeshRenderer&#x27;</span>)</span><br><span class="line">    sprites = &#123;Sprites1, Sprites2, Sprites3&#125;</span><br><span class="line">    RegisterButton(playBtn, PlayGame)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> clicked <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">input</span> = UE.Input</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>.GetKeyDown(UE.KeyCode.Space) <span class="keyword">or</span> <span class="built_in">input</span>.GetMouseButtonDown(<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">        direction = V3.up * strength</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>.touchCount &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> t = <span class="built_in">input</span>.GetTouch(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> t.phase == UE.TouchPhase.Began <span class="keyword">then</span> direction = V3.up * strength <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    direction.y = direction.y + gravity * Time.deltaTime</span><br><span class="line">    Bird.transform.position = Bird.transform.position + direction * Time.deltaTime</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mrBg <span class="keyword">then</span> <span class="keyword">local</span> m = mrBg.material; m.mainTextureOffset = m.mainTextureOffset + V2(animBg * Time.deltaTime, <span class="number">0</span>) <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> mrG  <span class="keyword">then</span> <span class="keyword">local</span> m = mrG.material;  m.mainTextureOffset = m.mainTextureOffset  + V2(animGround * Time.deltaTime, <span class="number">0</span>) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #cached <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> it = cached[i]</span><br><span class="line">        <span class="keyword">if</span> it.gameObject.activeSelf <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> tf = it.gameObject.transform</span><br><span class="line">            tf.position = tf.position + V3.left * speed * Time.deltaTime</span><br><span class="line"></span><br><span class="line">            <span class="keyword">local</span> x = tf.position.x</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">-0.1</span> <span class="keyword">and</span> x &lt; <span class="number">0.1</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">local</span> y, top, bot = Bird.transform.position.y, it.scorezone.position.y + <span class="number">1.0</span>, it.scorezone.position.y - <span class="number">1.0</span></span><br><span class="line">                <span class="keyword">if</span> y &gt; bot <span class="keyword">and</span> y &lt; top <span class="keyword">then</span> IncreaseScore()</span><br><span class="line">                <span class="keyword">elseif</span> <span class="keyword">not</span> isOver <span class="keyword">then</span> isOver = <span class="literal">true</span>; <span class="keyword">if</span> seqSpawn <span class="keyword">then</span> seqSpawn:Kill() <span class="keyword">end</span>; GameOver() <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> tf.position.x &lt; leftEdge <span class="keyword">then</span> it.gameObject:SetActive(<span class="literal">false</span>) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Cache</span><span class="params">(go)</span></span></span><br><span class="line">    <span class="keyword">local</span> t = go.transform</span><br><span class="line">    <span class="keyword">return</span> &#123; gameObject = go, top = t:Find(<span class="string">&#x27;Top Pipe&#x27;</span>), bottom = t:Find(<span class="string">&#x27;Bottom Pipe&#x27;</span>), scorezone = t:Find(<span class="string">&#x27;Scoring Zone&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Rent</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #cached <span class="keyword">do</span> <span class="keyword">if</span> <span class="keyword">not</span> cached[i].gameObject.activeSelf <span class="keyword">then</span> <span class="keyword">return</span> cached[i] <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Spawn</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> node = Rent()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> go = UE.GameObject.Instantiate(prefab, Spawner.transform.position, UE.Quaternion.identity)</span><br><span class="line">        go.transform.position = go.transform.position + V3.up * <span class="built_in">math</span>.<span class="built_in">random</span>(minH, maxH)</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(cached, Cache(go))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">local</span> tf = node.gameObject.transform</span><br><span class="line">        tf.position = Spawner.transform.position + V3.up * <span class="built_in">math</span>.<span class="built_in">random</span>(minH, maxH)</span><br><span class="line">        node.gameObject:SetActive(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">AnimateSprite</span><span class="params">()</span></span></span><br><span class="line">    spriteIndex = spriteIndex + <span class="number">1</span>; <span class="keyword">if</span> spriteIndex &gt; #sprites <span class="keyword">then</span> spriteIndex = <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line">    sr.sprite = sprites[spriteIndex]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PlayGame</span><span class="params">()</span></span></span><br><span class="line">    isOver, clicked, score = <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">0</span></span><br><span class="line">    U.SetText(scoreText, score)</span><br><span class="line">    playBtn.gameObject:SetActive(<span class="literal">false</span>); gameOver:SetActive(<span class="literal">false</span>)</span><br><span class="line">    UE.Time.timeScale = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span> Spawn() <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #cached <span class="keyword">do</span> cached[i].gameObject:SetActive(<span class="literal">false</span>) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> seqAnim  <span class="keyword">then</span> seqAnim:Kill()  <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> seqSpawn <span class="keyword">then</span> seqSpawn:Kill() <span class="keyword">end</span></span><br><span class="line">    seqAnim  = DOTween.Sequence():AppendCallback(AnimateSprite):AppendInterval(<span class="number">0.15</span>):SetLoops(<span class="number">-1</span>)</span><br><span class="line">    seqSpawn = DOTween.Sequence():AppendCallback(Spawn):AppendInterval(spawnRate):SetLoops(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GameOver</span><span class="params">()</span></span> playBtn.gameObject:SetActive(<span class="literal">true</span>); gameOver:SetActive(<span class="literal">true</span>); Pause(); clicked = <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pause</span><span class="params">()</span></span>    UE.Time.timeScale = <span class="number">0.0</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IncreaseScore</span><span class="params">()</span></span> score = score + <span class="number">1</span>; U.SetText(scoreText, score) <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RegisterButton</span><span class="params">(btn, fn)</span></span> btn.onClick:AddListener(fn) <span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="六、Addressables-远程-Loader（可替换-Resources）"><a href="#六、Addressables-远程-Loader（可替换-Resources）" class="headerlink" title="六、Addressables 远程 Loader（可替换 Resources）"></a>六、Addressables 远程 Loader（可替换 Resources）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: AddressablesLuaLoader.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.AddressableAssets;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.ResourceManagement.AsyncOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AddressablesLuaLoader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Load</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> key = <span class="string">$&quot;lua/<span class="subst">&#123;fileName&#125;</span>.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> h = Addressables.LoadAssetAsync&lt;TextAsset&gt;(key);</span><br><span class="line">        h.WaitForCompletion();</span><br><span class="line">        <span class="keyword">var</span> ta = h.Status == AsyncOperationStatus.Succeeded ? h.Result : <span class="literal">null</span>;</span><br><span class="line">        Addressables.Release(h);</span><br><span class="line">        <span class="keyword">return</span> ta ? Encoding.UTF8.GetBytes(ta.text) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>WidgetLuaBehaviour.Awake()</code> 中使用：<code>Env.AddLoader(AddressablesLuaLoader.Load)</code>。</p><hr><h2 id="七、IL2CPP-AOT-剪裁保活"><a href="#七、IL2CPP-AOT-剪裁保活" class="headerlink" title="七、IL2CPP &#x2F; AOT 剪裁保活"></a>七、IL2CPP &#x2F; AOT 剪裁保活</h2><p><strong><code>Runtime/Lua/GenConfig.cs</code></strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> DG.Tweening;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">GenConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">LuaCallCSharp</span>] <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; LuaCallCSharp = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typeof</span>(GameObject), <span class="keyword">typeof</span>(Transform), <span class="keyword">typeof</span>(Time), <span class="keyword">typeof</span>(Debug),</span><br><span class="line">        <span class="keyword">typeof</span>(TMPro.TextMeshProUGUI), <span class="keyword">typeof</span>(TMPro.TextMeshPro),</span><br><span class="line">        <span class="keyword">typeof</span>(Sequence), <span class="keyword">typeof</span>(Tween), <span class="keyword">typeof</span>(Tweener), <span class="keyword">typeof</span>(DOVirtual)</span><br><span class="line">    &#125;;</span><br><span class="line">    [<span class="meta">CSharpCallLua</span>] <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; CSharpCallLua = <span class="keyword">new</span>() &#123; <span class="keyword">typeof</span>(Action) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Runtime/Lua/link.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linker</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine.GameObject&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine.Transform&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;UnityEngine.Time&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;Unity.TextMeshPro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;TMPro.TextMeshProUGUI&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;TMPro.TextMeshPro&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;DOTween&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.Sequence&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.Tween&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.Tweener&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">&quot;DG.Tweening.DOVirtual&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">&quot;XLua&quot;</span> <span class="attr">preserve</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linker</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="八、落地步骤"><a href="#八、落地步骤" class="headerlink" title="八、落地步骤"></a>八、落地步骤</h2><ol><li>场景创建 <strong>LuaRunner</strong>，挂 <code>WidgetLuaBehaviour</code>。</li><li>在 <code>Injections</code> 注入：<code>Bird</code>（SpriteRenderer+Collider2D）、<code>Spawner</code>、<code>prefab</code>（含 <code>Top/Bottom/Scoring Zone</code>）、<code>scoreText</code>（TMP 或 Text）、<code>playBtn</code>、<code>gameOver</code>、<code>Background/Ground</code>（MeshRenderer）、<code>Sprites1/2/3</code>。</li><li>放置 <code>flappy_bird.lua.txt</code>、<code>util.lua.txt</code> 到 <code>Resources/Lua/</code>。</li><li>运行：点击 <strong>Play</strong>，空格&#x2F;鼠标&#x2F;触摸控制小鸟。</li><li>（可选）切 Addressables Loader，实现脚本远程热更。</li></ol><hr><h2 id="九、性能要点与排错表"><a href="#九、性能要点与排错表" class="headerlink" title="九、性能要点与排错表"></a>九、性能要点与排错表</h2><ul><li><strong>对象池</strong>：只 <code>SetActive</code> 与位置重置；<strong>首帧预热 5~10</strong> 组元素避免卡顿。</li><li><strong>无 GC</strong>：跨语言类型&#x2F;字符串局部缓存；Update 避免临时表；<strong>Sequence</strong> 替协程。</li><li><strong>GC Tick</strong>：<code>luaEnv.Tick()</code> 默认 1 秒一次足够。</li><li><strong>判定窗口</strong>：仅在 <code>x≈0</code> 的窄窗口做计分&#x2F;死亡判定。</li><li><strong>UI 兼容</strong>：统一 <code>util.SetText</code>，优先 TMP→Text 回落。</li></ul><table><thead><tr><th>现象</th><th>可能原因</th><th>快速处理</th></tr></thead><tbody><tr><td><code>NullReferenceException: TMP_Text</code></td><td>传入的是 <code>Text</code> 或未注入</td><td>已做 TMP→Text 回落；若仍 NRE，多半 <code>scoreText</code> 未注入</td></tr><tr><td>Lua <code>attempt to index nil</code></td><td>注入名不一致 &#x2F; 未注入</td><td>对照 <code>Injection.name</code> 与 Lua 变量名</td></tr><tr><td>DOTween 序列不执行</td><td>未导入&#x2F;未初始化</td><td>导入 DOTween；运行 Utility Panel 生成链接</td></tr><tr><td>移动端触摸无效</td><td>无 <code>EventSystem</code></td><td>在 Canvas 下添加 EventSystem</td></tr><tr><td>首波卡顿</td><td>首次 Instantiate</td><td>对象池<strong>预热</strong>或延迟首波生成</td></tr><tr><td>IL2CPP 崩溃&#x2F;丢类型</td><td>剪裁导致</td><td>按 <code>GenConfig.cs</code> + <code>link.xml</code> 保活</td></tr></tbody></table><hr><h2 id="十、可扩展路线"><a href="#十、可扩展路线" class="headerlink" title="十、可扩展路线"></a>十、可扩展路线</h2><ul><li><strong>难度曲线</strong>：分数↑ → <code>spawnRate</code>↓、<code>speed</code>↑（线性&#x2F;指数&#x2F;阶梯）。</li><li><strong>皮肤系统</strong>：小鸟帧图&#x2F;背景材质抽成 <code>ScriptableObject</code> 或远程配置。</li><li><strong>音效</strong>：点击&#x2F;得分&#x2F;死亡接入 <code>AudioMixer</code>；Lua 切换音效无需重打包。</li><li><strong>存档 &amp; 排行</strong>：本地 JSON（<code>persistentDataPath</code>）&#x2F; 第三方 Leaderboard。</li><li><strong>远程热更</strong>：脚本文本加签名校验、增量下载、版本回滚。</li><li><strong>关卡编辑</strong>：固定序列 + 随机扰动的混合生成表。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> Unity </category>
          
          <category> Lua </category>
          
          <category> xLua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xLua </tag>
            
            <tag> 热更新 </tag>
            
            <tag> Object Pool </tag>
            
            <tag> DOTween </tag>
            
            <tag> TMP </tag>
            
            <tag> IL2CPP </tag>
            
            <tag> Addressables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua &amp; xLua 语法学习（Unity向）</title>
      <link href="/2025/07/22/Lua%20&amp;%20xLua%20%E8%AF%AD%E6%B3%95%E6%95%99%E5%AD%A6%EF%BC%88Unity%E5%90%91%EF%BC%89/"/>
      <url>/2025/07/22/Lua%20&amp;%20xLua%20%E8%AF%AD%E6%B3%95%E6%95%99%E5%AD%A6%EF%BC%88Unity%E5%90%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标：一篇文吃透 <strong>Lua 语法</strong> 与 <strong>xLua 互操作语法</strong>。不聊工程目录，只聊概念 + 语法 + 可直接运行的片段。</p></blockquote><span id="more"></span><h2 id="0-速览：Lua-的“七件套”"><a href="#0-速览：Lua-的“七件套”" class="headerlink" title="0. 速览：Lua 的“七件套”"></a>0. 速览：Lua 的“七件套”</h2><ul><li>基础类型：<code>nil / boolean / number / string / table / function / thread（协程）</code>（还有 <code>userdata</code>，在 xLua 中常见于 C# 对象）</li><li>三类运算：算术 <code>+ - * / % // ^</code>、比较 <code>== ~= &lt; &gt; &lt;= &gt;=</code>、逻辑 <code>and or not</code></li><li>两个“黑魔法”：<strong>表（table）<strong>与</strong>元表（metatable）</strong><br>表是一切组合数据的容器；元表让你给表（或 userdata）定制运算与访问规则。</li></ul><hr><h2 id="1-变量、作用域与表达式"><a href="#1-变量、作用域与表达式" class="headerlink" title="1. 变量、作用域与表达式"></a>1. 变量、作用域与表达式</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 变量与作用域</span></span><br><span class="line"><span class="keyword">local</span> x = <span class="number">10</span>                    <span class="comment">-- local：局部变量（推荐默认都用 local）</span></span><br><span class="line">y = <span class="number">20</span>                          <span class="comment">-- 无 local：全局变量（容易污染命名空间，不推荐）</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> x = <span class="number">99</span>                  <span class="comment">-- 块级作用域：do ... end 内部的 x 与外部不同</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;inner x&quot;</span>, x)           <span class="comment">-- 99</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;outer x&quot;</span>, x)             <span class="comment">-- 10</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 数字与字符串</span></span><br><span class="line"><span class="keyword">local</span> a, b = <span class="number">7</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a / b)                    <span class="comment">-- 浮点除法 2.333...</span></span><br><span class="line"><span class="built_in">print</span>(a // b)                   <span class="comment">-- 整除 2</span></span><br><span class="line"><span class="built_in">print</span>(a % b)                    <span class="comment">-- 取模 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ^ <span class="number">3</span>)                    <span class="comment">-- 次方 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> s = <span class="string">&quot;Lua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi &quot;</span> .. s)               <span class="comment">-- 字符串拼接用 ..</span></span><br><span class="line"><span class="built_in">print</span>(#s)                       <span class="comment">-- 字符串长度（对表是“长度运算符”，见后文）</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 多重赋值与交换</span></span><br><span class="line"><span class="keyword">local</span> i, j = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">i, j = j, i                     <span class="comment">-- 交换变量</span></span><br><span class="line"><span class="built_in">print</span>(i, j)                     <span class="comment">-- 2 1</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-函数、闭包与可变参数"><a href="#2-函数、闭包与可变参数" class="headerlink" title="2. 函数、闭包与可变参数"></a>2. 函数、闭包与可变参数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 函数基础</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x, y)</span></span>        <span class="comment">-- 定义函数（local 防止泄露到全局）</span></span><br><span class="line">  <span class="keyword">return</span> x + y                  <span class="comment">-- Lua 支持多返回值：return a, b, c</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">4</span>))                <span class="comment">-- 7</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 闭包（捕获外部变量）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span><span class="params">()</span></span>    <span class="comment">-- 工厂函数</span></span><br><span class="line">  <span class="keyword">local</span> n = <span class="number">0</span>                   <span class="comment">-- 被捕获的“上值”（upvalue）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>             <span class="comment">-- 返回匿名函数</span></span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> nextId = makeCounter()</span><br><span class="line"><span class="built_in">print</span>(nextId(), nextId())       <span class="comment">-- 1 2（状态被函数记住）</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 可变参数 ...</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(...)</span></span>         <span class="comment">-- ... 接收任意数量实参</span></span><br><span class="line">  <span class="keyword">local</span> total = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;...&#125;) <span class="keyword">do</span>  <span class="comment">-- 把 ... 收集到新表再遍历（简单直观）</span></span><br><span class="line">    total = total + v</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))             <span class="comment">-- 10</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 冒号语法糖（面向对象风格）</span></span><br><span class="line"><span class="keyword">local</span> Player = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player.say</span><span class="params">(self, msg)</span></span>  <span class="comment">-- 点语法：需要手动传 self</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">self</span>.name .. <span class="string">&quot;: &quot;</span> .. msg)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player:say2</span><span class="params">(msg)</span></span>       <span class="comment">-- 冒号语法：定义时自动加 self 参数</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">self</span>.name .. <span class="string">&quot;: &quot;</span> .. msg)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> p = &#123;name = <span class="string">&quot;Lee&quot;</span>&#125;</span><br><span class="line">Player.say(p, <span class="string">&quot;hello&quot;</span>)          <span class="comment">-- 等价</span></span><br><span class="line">p: say2(<span class="string">&quot;hi&quot;</span>)                   <span class="comment">-- 等价于 Player.say2(p, &quot;hi&quot;)</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-表（Table）最重要：从入门到专家"><a href="#3-表（Table）最重要：从入门到专家" class="headerlink" title="3. 表（Table）最重要：从入门到专家"></a>3. <strong>表（Table）最重要：从入门到专家</strong></h2><h3 id="3-1-构造、读写与删除"><a href="#3-1-构造、读写与删除" class="headerlink" title="3.1 构造、读写与删除"></a>3.1 构造、读写与删除</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 构造器（数组式 + 字典式可混用）</span></span><br><span class="line"><span class="keyword">local</span> arr  = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;                 <span class="comment">-- “数组式”下标从 1 开始</span></span><br><span class="line"><span class="keyword">local</span> dict = &#123;x = <span class="number">1</span>, y = <span class="number">2</span>&#125;               <span class="comment">-- “字典式”键是字符串</span></span><br><span class="line"><span class="keyword">local</span> mix  = &#123;<span class="number">100</span>, a = <span class="number">5</span>, [<span class="string">&quot;weird-key&quot;</span>] = <span class="number">7</span>, [<span class="literal">true</span>] = <span class="string">&quot;ok&quot;</span>&#125; <span class="comment">-- 任意键</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 访问与修改</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>], arr[<span class="number">2</span>])                     <span class="comment">-- 10 20</span></span><br><span class="line"><span class="built_in">print</span>(dict.x, dict[<span class="string">&quot;y&quot;</span>])                  <span class="comment">-- 1  2（t.k 等价 t[&quot;k&quot;]）</span></span><br><span class="line">mix[<span class="string">&quot;weird-key&quot;</span>] = <span class="number">8</span>                      <span class="comment">-- 修改</span></span><br><span class="line">dict.z = <span class="number">3</span>                                <span class="comment">-- 新增键</span></span><br><span class="line">dict.x = <span class="literal">nil</span>                              <span class="comment">-- 删除键：设为 nil 即删除</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-2-遍历与长度"><a href="#3-2-遍历与长度" class="headerlink" title="3.2 遍历与长度"></a>3.2 遍历与长度</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 遍历</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span>                <span class="comment">-- ipairs：连续整数键 1..n，遇到第一个 nil 停</span></span><br><span class="line">  <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(mix) <span class="keyword">do</span>                 <span class="comment">-- pairs：遍历所有键（无序，不保证顺序稳定）</span></span><br><span class="line">  <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 长度运算符 #</span></span><br><span class="line"><span class="keyword">local</span> t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)                                 <span class="comment">-- 3</span></span><br><span class="line">t[<span class="number">4</span>] = <span class="literal">nil</span>                                <span class="comment">-- “洞”会影响 # 运算</span></span><br><span class="line"><span class="built_in">print</span>(#t)                                 <span class="comment">-- 未定义行为（可能仍是 3，也可能 2）——不要依赖</span></span><br><span class="line"><span class="comment">-- 正解：自己维护长度或用 table.move/table.insert/remove 管理</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-3-常用库函数（table）"><a href="#3-3-常用库函数（table）" class="headerlink" title="3.3 常用库函数（table）"></a>3.3 常用库函数（<code>table</code>）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 插入/删除/拼接/排序/打包</span></span><br><span class="line"><span class="keyword">local</span> t = &#123; <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span> &#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t, <span class="number">1</span>, <span class="string">&quot;z&quot;</span>)                   <span class="comment">-- 在索引 1 插入 &quot;z&quot;：&#123;&quot;z&quot;,&quot;b&quot;,&quot;a&quot;,&quot;c&quot;&#125;</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(t, <span class="number">2</span>)                         <span class="comment">-- 删除索引 2：&#123;&quot;z&quot;,&quot;a&quot;,&quot;c&quot;&#125;</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(t, <span class="function"><span class="keyword">function</span><span class="params">(lhs, rhs)</span></span>          <span class="comment">-- 自定义排序（按字母升序）</span></span><br><span class="line">  <span class="keyword">return</span> lhs &lt; rhs</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">concat</span>(t, <span class="string">&quot;,&quot;</span>))               <span class="comment">-- &quot;a,c,z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> packed = <span class="built_in">table</span>.pack(<span class="number">1</span>, <span class="literal">nil</span>, <span class="number">3</span>)      <span class="comment">-- &#123;1,nil,3&#125;; packed.n=3 可保存长度包括 nil</span></span><br><span class="line"><span class="keyword">local</span> a, b, c = <span class="built_in">table</span>.<span class="built_in">unpack</span>(&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;)     <span class="comment">-- 解包</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-4-引用语义、浅拷贝与深拷贝"><a href="#3-4-引用语义、浅拷贝与深拷贝" class="headerlink" title="3.4 引用语义、浅拷贝与深拷贝"></a>3.4 引用语义、浅拷贝与深拷贝</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 引用语义</span></span><br><span class="line"><span class="keyword">local</span> t1 = &#123;a=<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">local</span> t2 = t1                  <span class="comment">-- 赋值只是“指向同一张表”</span></span><br><span class="line">t2.a = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(t1.a)                    <span class="comment">-- 9</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 浅拷贝</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">shallow_copy</span><span class="params">(src)</span></span></span><br><span class="line">  <span class="keyword">local</span> dst = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(src) <span class="keyword">do</span></span><br><span class="line">    dst[k] = v                 <span class="comment">-- 仅复制第一层，嵌套表仍是“同一个引用”</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> dst</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 深拷贝（带环检测）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">deep_copy</span><span class="params">(src, seen)</span></span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span>(src) ~= <span class="string">&quot;table&quot;</span> <span class="keyword">then</span> <span class="keyword">return</span> src <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> seen <span class="keyword">and</span> seen[src] <span class="keyword">then</span> <span class="keyword">return</span> seen[src] <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> dst = &#123;&#125;</span><br><span class="line">  seen = seen <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  seen[src] = dst</span><br><span class="line">  <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(src) <span class="keyword">do</span></span><br><span class="line">    dst[deep_copy(k, seen)] = deep_copy(v, seen)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment">-- 可选：拷贝元表</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(dst, <span class="built_in">getmetatable</span>(src))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-5-rawget-rawset-与只读表、带默认值表"><a href="#3-5-rawget-rawset-与只读表、带默认值表" class="headerlink" title="3.5 rawget/rawset 与只读表、带默认值表"></a>3.5 <code>rawget/rawset</code> 与<strong>只读表</strong>、<strong>带默认值表</strong></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region rawget/rawset：绕过元表的“钩子”直接读写底层存储</span></span><br><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> mt = &#123;</span><br><span class="line">  <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="number">42</span> <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(t, mt)</span><br><span class="line"><span class="built_in">print</span>(t.someKey)               <span class="comment">-- 42（触发 __index）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">rawget</span>(t, <span class="string">&quot;someKey&quot;</span>))    <span class="comment">-- nil（不触发 __index，读到真实存储）</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 只读表（访问 OK，写入报错）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">readonly</span><span class="params">(tbl)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = tbl,             <span class="comment">-- 读：转发到原表</span></span><br><span class="line">    <span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">error</span>(<span class="string">&quot;table is readonly&quot;</span>) <span class="keyword">end</span>, <span class="comment">-- 写：报错</span></span><br><span class="line">    __pairs = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">pairs</span>(tbl) <span class="keyword">end</span>,             <span class="comment">-- 遍历：透传</span></span><br><span class="line">    <span class="built_in">__len</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> #tbl <span class="keyword">end</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 默认值表（访问不存在键时返回默认）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">with_default</span><span class="params">(defaultValue)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, _)</span></span> <span class="keyword">return</span> defaultValue <span class="keyword">end</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> bag = with_default(<span class="number">0</span>)</span><br><span class="line">bag.apple = bag.apple + <span class="number">1</span>      <span class="comment">-- 读不到时当 0</span></span><br><span class="line"><span class="built_in">print</span>(bag.apple)               <span class="comment">-- 1</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="3-6-元表（Metatable）与“像类一样用表”"><a href="#3-6-元表（Metatable）与“像类一样用表”" class="headerlink" title="3.6 元表（Metatable）与“像类一样用表”"></a>3.6 元表（Metatable）与“像类一样用表”</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 运算符重载与属性“魔法”</span></span><br><span class="line"><span class="keyword">local</span> vec = &#123;x=<span class="number">1</span>, y=<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br><span class="line">mt.<span class="built_in">__add</span> = <span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span> <span class="keyword">return</span> &#123;x=a.x+b.x, y=a.y+b.y&#125; <span class="keyword">end</span>   <span class="comment">-- 重载 +</span></span><br><span class="line">mt.<span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span> <span class="keyword">return</span> (<span class="string">&quot;(%d,%d)&quot;</span>):<span class="built_in">format</span>(v.x,v.y) <span class="keyword">end</span></span><br><span class="line">mt.<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t,k)</span></span></span><br><span class="line">  <span class="keyword">if</span> k == <span class="string">&quot;len&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">math</span>.<span class="built_in">sqrt</span>(t.x*t.x + t.y*t.y)                      <span class="comment">-- 惰性“属性”</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">setmetatable</span>(vec, mt)</span><br><span class="line"><span class="built_in">print</span>(vec + &#123;x=<span class="number">3</span>,y=<span class="number">4</span>&#125;)  <span class="comment">-- (4,6)</span></span><br><span class="line"><span class="built_in">print</span>(vec.<span class="built_in">len</span>)          <span class="comment">-- 2.236...</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region “类风格”构造与方法</span></span><br><span class="line"><span class="keyword">local</span> Class = &#123;&#125;                          <span class="comment">-- 类表（方法定义在它上面）</span></span><br><span class="line">Class.<span class="built_in">__index</span> = Class                     <span class="comment">-- 实例查不到键时从 Class 上找（方法）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:new</span><span class="params">(name)</span></span>                  <span class="comment">-- 构造器</span></span><br><span class="line">  <span class="keyword">local</span> o = &#123;name = name&#125;                 <span class="comment">-- 实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(o, Class)           <span class="comment">-- 绑定元表</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:say</span><span class="params">(msg)</span></span>                   <span class="comment">-- 方法</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">self</span>.name .. <span class="string">&quot;: &quot;</span> .. msg)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> c = Class:new(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">c:say(<span class="string">&quot;yo&quot;</span>)                               <span class="comment">-- Alice: yo</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 弱表（缓存与对象池）：__mode = &quot;k&quot; / &quot;v&quot; / &quot;kv&quot;</span></span><br><span class="line"><span class="keyword">local</span> cache = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__mode</span>=<span class="string">&quot;v&quot;</span>&#125;) <span class="comment">-- 值是弱引用，被外部释放后会被 GC 回收</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-字符串与模式匹配（正则替代品）"><a href="#4-字符串与模式匹配（正则替代品）" class="headerlink" title="4. 字符串与模式匹配（正则替代品）"></a>4. 字符串与模式匹配（正则替代品）</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 常用 API：sub/find/gsub/format</span></span><br><span class="line"><span class="keyword">local</span> s = <span class="string">&quot;Lua-XLua-Unity&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(s, <span class="number">5</span>, <span class="number">8</span>))                 <span class="comment">-- &quot;XLua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(s, <span class="string">&quot;Unity&quot;</span>))             <span class="comment">-- 起止位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;a,b,c&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>))      <span class="comment">-- &quot;a|b|c&quot;, 次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;pos=(%0.2f,%0.2f)&quot;</span>, <span class="number">1.234</span>, <span class="number">5.678</span>))</span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 模式匹配（不完全等于正则，但够用）</span></span><br><span class="line"><span class="keyword">local</span> text = <span class="string">&quot;id=42 user=lee&quot;</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(text, <span class="string">&quot;(%w+)=(%w+)&quot;</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(k, v)                              <span class="comment">-- id 42 / user lee</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-协程：可暂停的函数"><a href="#5-协程：可暂停的函数" class="headerlink" title="5. 协程：可暂停的函数"></a>5. 协程：可暂停的函数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 生产者-消费者示例</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(i)                   <span class="comment">-- 产出一个值并挂起</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;done&quot;</span>                          <span class="comment">-- 最终返回</span></span><br><span class="line">  <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> co = producer()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))                <span class="comment">-- true done</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-错误与异常：error-assert-pcall-xpcall"><a href="#6-错误与异常：error-assert-pcall-xpcall" class="headerlink" title="6. 错误与异常：error / assert / pcall / xpcall"></a>6. 错误与异常：<code>error / assert / pcall / xpcall</code></h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region pcall：捕获错误不抛出</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">div</span><span class="params">(a,b)</span></span></span><br><span class="line">  <span class="keyword">if</span> b == <span class="number">0</span> <span class="keyword">then</span> <span class="built_in">error</span>(<span class="string">&quot;divide by zero&quot;</span>) <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> a/b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, res = <span class="built_in">pcall</span>(div, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ok, res)                             <span class="comment">-- false   divide by zero</span></span><br><span class="line"><span class="comment">-- xpcall 可附带 traceback：</span></span><br><span class="line"><span class="keyword">local</span> ok2, res2 = <span class="built_in">xpcall</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> div(<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">end</span>, <span class="built_in">debug</span>.<span class="built_in">traceback</span>)</span><br><span class="line"><span class="built_in">print</span>(ok2, res2)</span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-xLua-语法要点：Lua-↔-C"><a href="#7-xLua-语法要点：Lua-↔-C" class="headerlink" title="7. xLua 语法要点：Lua ↔ C#"></a>7. xLua 语法要点：Lua ↔ C#</h2><blockquote><p>不谈工程目录，只谈 <strong>怎么在 Lua 里“像 C# 那样用类型”</strong> 与 <strong>C# 怎么调用 Lua</strong>。</p></blockquote><h3 id="7-1-在-Lua-里访问-C-（CS-命名空间）"><a href="#7-1-在-Lua-里访问-C-（CS-命名空间）" class="headerlink" title="7.1 在 Lua 里访问 C#（CS 命名空间）"></a>7.1 在 Lua 里访问 C#（<code>CS</code> 命名空间）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region CS 入口（静态/实例/枚举）</span></span><br><span class="line"><span class="keyword">local</span> CS = CS                                     <span class="comment">-- 简写</span></span><br><span class="line">CS.UnityEngine.Debug.Log(<span class="string">&quot;[Lua] hello&quot;</span>)           <span class="comment">-- 静态方法</span></span><br><span class="line"><span class="keyword">local</span> go = CS.UnityEngine.GameObject(<span class="string">&quot;FromLua&quot;</span>)   <span class="comment">-- new GameObject(&quot;FromLua&quot;)</span></span><br><span class="line">go.transform.position = CS.UnityEngine.Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">-- 值类型“整体赋回”（详见 7.3）</span></span><br><span class="line"><span class="keyword">local</span> KeyCode = CS.UnityEngine.KeyCode</span><br><span class="line"><span class="built_in">print</span>(KeyCode.Space)                               <span class="comment">-- 枚举</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 泛型（List / Dictionary）</span></span><br><span class="line"><span class="keyword">local</span> ListInt = CS.System.Collections.Generic.List(CS.System.Int32)    <span class="comment">-- List&lt;int&gt;</span></span><br><span class="line"><span class="keyword">local</span> list = ListInt()                           <span class="comment">-- 构造</span></span><br><span class="line">list:Add(<span class="number">10</span>); list:Add(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(list:get_Count(), list:Contains(<span class="number">10</span>))       <span class="comment">-- 2  true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> DictSF = CS.System.Collections.Generic.Dictionary(CS.System.String, CS.System.Single) <span class="comment">-- Dictionary&lt;string,float&gt;</span></span><br><span class="line"><span class="keyword">local</span> dict = DictSF()</span><br><span class="line">dict:Add(<span class="string">&quot;atk&quot;</span>, <span class="number">12.5</span>)</span><br><span class="line"><span class="built_in">print</span>(dict:get_Item(<span class="string">&quot;atk&quot;</span>))                      <span class="comment">-- 12.5</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--#region 委托/事件（Action/Func）</span></span><br><span class="line"><span class="keyword">local</span> Action = CS.System.Action</span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onQuit</span><span class="params">()</span></span> CS.UnityEngine.Debug.Log(<span class="string">&quot;[Lua] quitting&quot;</span>) <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 订阅 .NET 事件：组合委托（不同类型事件有不同 API，以下是 .NET 风格示例）</span></span><br><span class="line">CS.UnityEngine.Application.quitting = CS.System.Delegate.Combine(</span><br><span class="line">  CS.UnityEngine.Application.quitting,</span><br><span class="line">  Action(onQuit)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 取消订阅：Delegate.Remove(...)</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><h3 id="7-2-在-C-里调用-Lua（委托-接口映射）"><a href="#7-2-在-C-里调用-Lua（委托-接口映射）" class="headerlink" title="7.2 在 C# 里调用 Lua（委托&#x2F;接口映射）"></a>7.2 在 C# 里调用 Lua（委托&#x2F;接口映射）</h3><blockquote><p>核心思路：<strong>把 Lua 函数“看作” C# 的委托或接口</strong>，这样 C# 端调用更类型安全、开销更低。<br>这需要<strong>白名单 + 代码生成</strong>（<code>[CSharpCallLua]</code> 等），此处仅示意“怎么用”。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> C# 伪代码（重点是“语法”）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Lua 侧：</span></span><br><span class="line"><span class="comment">Demo = &#123;&#125;</span></span><br><span class="line"><span class="comment">function Demo.add(x,y) return x+y end</span></span><br><span class="line"><span class="comment">function Demo.on_click(name) print(name) end</span></span><br><span class="line"><span class="comment">ButtonHandler = &#123; OnClick = function(self, name) print(name) end &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> table = env.Global.Get&lt;LuaTable&gt;(<span class="string">&quot;Demo&quot;</span>);           <span class="comment">// 取到 Lua 表</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">add</span> = table.Get&lt;Func&lt;<span class="built_in">int</span>,<span class="built_in">int</span>,<span class="built_in">int</span>&gt;&gt;(<span class="string">&quot;add&quot;</span>);          <span class="comment">// 把 Lua 函数映射成 C# 委托</span></span><br><span class="line">Debug.Log(<span class="keyword">add</span>(<span class="number">3</span>,<span class="number">4</span>));                                    <span class="comment">// 7</span></span><br><span class="line"><span class="keyword">var</span> onClick = table.Get&lt;Action&lt;<span class="built_in">string</span>&gt;&gt;(<span class="string">&quot;on_click&quot;</span>);    <span class="comment">// 同理</span></span><br><span class="line">onClick(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = env.Global.Get&lt;IButtonHandler&gt;(<span class="string">&quot;ButtonHandler&quot;</span>); <span class="comment">// 把 Lua 表当作接口对象</span></span><br><span class="line">handler.OnClick(<span class="string">&quot;Play&quot;</span>);</span><br><span class="line">table.Dispose();                                        <span class="comment">// 用完记得释放</span></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h3 id="7-3-值类型陷阱（Vector3-等）"><a href="#7-3-值类型陷阱（Vector3-等）" class="headerlink" title="7.3 值类型陷阱（Vector3 等）"></a>7.3 值类型陷阱（<code>Vector3</code> 等）</h3><ul><li><code>Vector3</code>&#x2F;<code>Color</code> 等是 <strong>值类型（struct）</strong>。在 Lua 里读取 <code>go.transform.position</code> 得到的是<strong>值的副本</strong>，<strong>不能直接点改</strong>。<br>正确做法：<strong>改临时变量，再整体赋回</strong>。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> pos = go.transform.position  <span class="comment">-- 取到副本</span></span><br><span class="line">pos.y = pos.y + <span class="number">1</span>                  <span class="comment">-- 修改副本</span></span><br><span class="line">go.transform.position = pos        <span class="comment">-- 整体赋回（这一步才生效）</span></span><br></pre></td></tr></table></figure><h3 id="7-4-数字类型与重载解析"><a href="#7-4-数字类型与重载解析" class="headerlink" title="7.4 数字类型与重载解析"></a>7.4 数字类型与重载解析</h3><ul><li>Lua 的 <code>number</code> 在 xLua 里通常走 <code>double</code>。传给 C# 的 <code>int/float</code> 会自动转换，但<strong>签名重载有歧义</strong>时可能报错。<br>解决：用显式类型构造消歧义，例如 <code>CS.System.Single(1.0)</code>、<code>CS.System.Int32(1)</code>。</li></ul><h3 id="7-5-性能与内存小抄（互操作相关）"><a href="#7-5-性能与内存小抄（互操作相关）" class="headerlink" title="7.5 性能与内存小抄（互操作相关）"></a>7.5 性能与内存小抄（互操作相关）</h3><ul><li>频繁调用的 Lua 函数请 <strong>缓存委托&#x2F;接口</strong>，避免每次 <code>Get&lt;T&gt;</code> 与查表。</li><li><code>LuaTable/LuaFunction</code> 用完 <strong>立刻 <code>Dispose()</code></strong>；否则 Lua GC 无法及时回收。</li><li>跨语言传大对象用 <strong>ID&#x2F;句柄</strong> 替代，另一侧再查询，减少边界拷贝。</li></ul><hr><h2 id="8-常见语法坑位清单（90-的报错都在这）"><a href="#8-常见语法坑位清单（90-的报错都在这）" class="headerlink" title="8. 常见语法坑位清单（90% 的报错都在这）"></a>8. 常见语法坑位清单（90% 的报错都在这）</h2><ol><li><strong><code>attempt to index a nil value</code></strong>：访问了 <code>nil</code>。先 <code>print(type(x))</code> 看是否为 <code>nil</code>。</li><li><strong><code>#</code> 运算对“有洞的数组”不可靠</strong>：不要用 <code>#t</code> 统计带空洞的数组长度。</li><li><strong>结构体属性“点改不生效”</strong>：<code>Vector3</code> 之类要<strong>整体赋回</strong>（见 7.3）。</li><li><strong>委托签名不匹配</strong>：<code>Action&lt;string&gt;</code> 与 Lua 函数的参数个数&#x2F;类型必须一致。</li><li><strong>排序比较器写错返回值</strong>：比较函数应返回 <code>true/false</code>，而不是 <code>-1/0/1</code>。</li></ol><hr><h2 id="9-实战练习（聚焦-Table-与-xLua-语法）"><a href="#9-实战练习（聚焦-Table-与-xLua-语法）" class="headerlink" title="9. 实战练习（聚焦 Table 与 xLua 语法）"></a>9. 实战练习（聚焦 Table 与 xLua 语法）</h2><p><strong>练习 A：实现一个“默认 0 的计数表”</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 练习 A 参考解法（逐行注释）</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(t, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, _)</span></span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span>  <span class="comment">-- 读不到键时默认为 0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> c = counter()</span><br><span class="line">c.apple = c.apple + <span class="number">1</span>                       <span class="comment">-- 读不到时返回 0，再 +1</span></span><br><span class="line">c.banana = c.banana + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(c.apple, c.banana)                    <span class="comment">-- 1  2</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><p><strong>练习 B：只读配置表</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 练习 B 参考解法</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">readonly</span><span class="params">(tbl)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="built_in">__index</span> = tbl,</span><br><span class="line">    <span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">error</span>(<span class="string">&quot;readonly&quot;</span>) <span class="keyword">end</span>,</span><br><span class="line">    __pairs = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">pairs</span>(tbl) <span class="keyword">end</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> cfg = readonly(&#123;hp=<span class="number">100</span>, atk=<span class="number">20</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(cfg.hp)           <span class="comment">-- 100</span></span><br><span class="line"><span class="comment">-- cfg.hp = 200         -- 报错：readonly</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><p><strong>练习 C（xLua）：用 List<int> 做桥接而不是 Lua 表</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--#region 练习 C 参考解法</span></span><br><span class="line"><span class="keyword">local</span> ListInt = CS.System.Collections.Generic.List(CS.System.Int32)</span><br><span class="line"><span class="keyword">local</span> scores = ListInt()     <span class="comment">-- 避免把 Lua 表传到 C# 再逐一解析，直接用 .NET 容器</span></span><br><span class="line">scores:Add(<span class="number">90</span>); scores:Add(<span class="number">85</span>); scores:Add(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(scores:get_Count())    <span class="comment">-- 3</span></span><br><span class="line"><span class="comment">--#endregion</span></span><br></pre></td></tr></table></figure><hr><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><ul><li><strong>表</strong>是 Lua 的心脏：会构造、会遍历、懂“洞”、会用 <code>table.*</code>、会玩元表，你就能写出优雅的 Lua。</li><li><strong>xLua</strong> 语法的核心就三件事：<strong><code>CS</code> 访问 + 泛型&#x2F;委托写法 + 值类型赋回</strong>。</li><li>写法上坚持：<strong>local 默认</strong>、<strong>小函数多闭包</strong>、<strong>边界少拷贝</strong>、<strong>用完就 <code>Dispose()</code></strong>。</li></ul><!-- > 想进阶：我可以再写《xLua 白名单进阶（接口/泛型/事件订阅最佳实践）》与《Lua 元表 Cookbook（\_\_index/\_\_newindex/\_\_pairs/\_\_len/\_\_call/只读表/弱表/多重键）》做配套。 -->]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
          <category> 教程 </category>
          
          <category> Unity </category>
          
          <category> xLua </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xLua </tag>
            
            <tag> Unity </tag>
            
            <tag> Lua </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo · 快速上手</title>
      <link href="/2025/07/03/Hello-Hexo/"/>
      <url>/2025/07/03/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向新手的 <strong>Hexo 操作说明</strong>。只保留最有用的命令与范例，能直接复制粘贴跑起来。</p></blockquote><span id="more"></span><h2 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1) 新建文章"></a>1) 新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一篇普通文章（建议文件名用英文，便于链接与版本管理）</span></span><br><span class="line">hexo new <span class="string">&quot;hello-hexo-quickstart&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可指定类型：post（默认）/ draft / page</span></span><br><span class="line">hexo new post  <span class="string">&quot;my-first-post&quot;</span></span><br><span class="line">hexo new draft <span class="string">&quot;post-draft&quot;</span>        <span class="comment"># 草稿（不会被发布）</span></span><br><span class="line">hexo publish draft <span class="string">&quot;post-draft&quot;</span>    <span class="comment"># 草稿转正式文章</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span>              <span class="comment"># 生成独立页面：/about/</span></span><br></pre></td></tr></table></figure><h2 id="2-本地预览"><a href="#2-本地预览" class="headerlink" title="2) 本地预览"></a>2) 本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动本地服务（默认 http://localhost:4000）</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：自动打开浏览器、指定端口</span></span><br><span class="line">hexo s -o -p 4001</span><br></pre></td></tr></table></figure><blockquote><p>退出预览：在终端按 <code>Ctrl + C</code>。</p></blockquote><h2 id="3-写作：Front-matter（安全模板）"><a href="#3-写作：Front-matter（安全模板）" class="headerlink" title="3) 写作：Front-matter（安全模板）"></a>3) 写作：Front-matter（安全模板）</h2><p>避免 YAML 报错的最小模板——<strong>列表一律用 <code>-</code>，不要多余缩进或反斜杠</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Your</span> <span class="string">Post</span> <span class="string">Title</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">updated:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一句话描述本文内容。</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&quot;#ffffff&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>常见字段说明：</p><ul><li><code>categories</code> &#x2F; <code>tags</code>：都是<strong>列表</strong>（用 <code>-</code>）。</li><li><code>description</code>：摘要文本，很多主题会用于 SEO&#x2F;预览卡片。</li><li>主题自带的 <code>cover</code> &#x2F; <code>top_img</code> 可按需添加；不需要时<strong>直接删掉字段</strong>，不要留空值。</li></ul><h2 id="4-生成静态文件"><a href="#4-生成静态文件" class="headerlink" title="4) 生成静态文件"></a>4) 生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可选：先清理，避免旧缓存导致显示异常</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成到 public/ 目录</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="5-部署到远程（以-GitHub-Pages-为例）"><a href="#5-部署到远程（以-GitHub-Pages-为例）" class="headerlink" title="5) 部署到远程（以 GitHub Pages 为例）"></a>5) 部署到远程（以 GitHub Pages 为例）</h2><h3 id="5-1-安装部署插件（首次）"><a href="#5-1-安装部署插件（首次）" class="headerlink" title="5.1 安装部署插件（首次）"></a>5.1 安装部署插件（首次）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git -D</span><br></pre></td></tr></table></figure><h3 id="5-2-配置-config-yml"><a href="#5-2-配置-config-yml" class="headerlink" title="5.2 配置 _config.yml"></a>5.2 配置 <code>_config.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;your-username&gt;/&lt;your-username&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>   <span class="comment"># 或者 gh-pages，取决于你的仓库设置</span></span><br></pre></td></tr></table></figure><h3 id="5-3-一键生成并部署"><a href="#5-3-一键生成并部署" class="headerlink" title="5.3 一键生成并部署"></a>5.3 一键生成并部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line"><span class="comment"># 或分步：hexo g &amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure><blockquote><p>若仓库开启了自定义域名（<code>CNAME</code>），请确保仓库根目录有正确的 <code>CNAME</code> 文件。</p></blockquote><h2 id="6-命令速查表"><a href="#6-命令速查表" class="headerlink" title="6) 命令速查表"></a>6) 命令速查表</h2><table><thead><tr><th>目的</th><th>命令</th></tr></thead><tbody><tr><td>新建文章</td><td><code>hexo new &quot;My Post&quot;</code></td></tr><tr><td>新建草稿</td><td><code>hexo new draft &quot;My Draft&quot;</code></td></tr><tr><td>草稿转正式</td><td><code>hexo publish draft &quot;My Draft&quot;</code></td></tr><tr><td>本地预览</td><td><code>hexo s</code> &#x2F; <code>hexo s -o -p 4001</code></td></tr><tr><td>清理缓存</td><td><code>hexo clean</code></td></tr><tr><td>生成静态文件</td><td><code>hexo g</code></td></tr><tr><td>部署</td><td><code>hexo d</code> &#x2F; <code>hexo g -d</code></td></tr></tbody></table><h2 id="7-常见问题（快速排查）"><a href="#7-常见问题（快速排查）" class="headerlink" title="7) 常见问题（快速排查）"></a>7) 常见问题（快速排查）</h2><ul><li><strong>YAMLException（前言区解析错误）</strong><br>多半是列表写成了 <code>* 项目</code> 或缩进错位；用上面的“安全模板”重写前言区。</li><li><strong>图片不显示</strong><br>确认图片位于 <code>source/img/</code>，引用用绝对路径：<code>/img/xxx.png</code>。</li><li><strong>部署报错：Deployer not found: git</strong><br>还没装 <code>hexo-deployer-git</code>：执行 <code>npm i hexo-deployer-git -D</code>。</li><li><strong>改了不生效</strong><br>执行 <code>hexo clean &amp;&amp; hexo s</code>，或清除浏览器缓存&#x2F;强刷。</li><li><strong>GitHub Pages 没有更新</strong><br>检查仓库 Actions&#x2F;Pages 状态、分支是否正确、<code>public/</code> 是否包含最新生成内容。</li></ul><h2 id="8-写作小贴士"><a href="#8-写作小贴士" class="headerlink" title="8) 写作小贴士"></a>8) 写作小贴士</h2><ul><li><strong>文件名与链接</strong>：文件名用英文、短横线分词，比如 <code>lua-xlua-syntax-tutorial.md</code>。</li><li><strong>代码高亮</strong>：代码块使用三反引号并指定语言，如 <code><code>bash&lt;/code&gt; / &lt;code&gt;</code>js</code>。</li><li><strong>长文章导航</strong>：开启 <code>toc: true</code> 与 <code>toc_number: true</code>，目录更清晰。</li><li><strong>更新日期</strong>：不想维护 <code>updated</code> 时可以删掉该字段，避免重复改动。</li></ul><hr><!-- 这篇就是一份**可直接发布**的 Hexo 使用说明。继续扩展的话，可以再写一篇「主题个性化与导航配置」或「GitHub Pages + Cloudflare 的域名与加速实践」，把站点体验拉满。 -->]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 写作 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
