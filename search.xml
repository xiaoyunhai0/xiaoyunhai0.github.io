<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xLua 热更入门与实践指南（Unity）</title>
      <link href="/2025/08/17/xLua-%E7%83%AD%E6%9B%B4%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
      <url>/2025/08/17/xLua-%E7%83%AD%E6%9B%B4%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标：让你在 30 分钟内跑通 xLua，完成 C# ↔ Lua 互调，并理解热更的“正确姿势”。</p></blockquote><span id="more"></span><h2 id="一、xLua-能做什么（一句话版）"><a href="#一、xLua-能做什么（一句话版）" class="headerlink" title="一、xLua 能做什么（一句话版）"></a>一、xLua 能做什么（一句话版）</h2><ul><li><strong>Lua 驱动业务</strong>：把易变的游戏&#x2F;业务逻辑写在 Lua，迭代不用重打包（在允许的目标平台上）。</li><li><strong>双向互调</strong>：Lua 调 C#（调用引擎与工具库）、C# 调 Lua（把 UI&#x2F;关卡等驱动交给 Lua）。</li><li><strong>Hotfix（补丁）</strong>：对已发布的 C# 方法做运行时替换（受平台与 IL2CPP 等限制，本文给出安全做法）。</li></ul><hr><h2 id="二、工程结构建议（拷走就能用）"><a href="#二、工程结构建议（拷走就能用）" class="headerlink" title="二、工程结构建议（拷走就能用）"></a>二、工程结构建议（拷走就能用）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Assets/</span><br><span class="line">└─ Scripts\_Lua/                 # 你写的 Lua 业务脚本（开发期）</span><br><span class="line">├─ main.lua.txt              # 入口脚本（注意 .lua.txt 便于打进资源）</span><br><span class="line">├─ core/                     # 通用模块（事件、任务、对象池等）</span><br><span class="line">└─ feature/                  # 项目功能域（如战斗、背包、引导）</span><br><span class="line">Resources/</span><br><span class="line">└─ Lua/                         # 开发期用 Resources 目录（便于预览）</span><br><span class="line">└─ ...（与 Scripts\_Lua 同步的子集）</span><br><span class="line">StreamingAssets/</span><br><span class="line">└─ Lua/                         # 运行期内置脚本（首包）</span><br><span class="line">PersistentDataPath/</span><br><span class="line">└─ lua/                         # 运行期热更脚本（下载到本地）</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">&gt; 核心思路：**加载器按“热更 &gt; 内置 &gt; Resources”优先级**找脚本，既能本地预览、也能线上替换。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 三、最小可运行示例</span><br><span class="line"></span><br><span class="line">### 1）新建 Lua 入口（`Assets/Scripts_Lua/main.lua.txt`）</span><br><span class="line"></span><br><span class="line">```lua</span><br><span class="line">-- main.lua（逐行中文注释）</span><br><span class="line">print(&quot;[Lua] main.lua 已执行&quot;)           -- 控制台确认</span><br><span class="line"></span><br><span class="line">-- 声明一个表作为“模块”</span><br><span class="line">Game = &#123;</span><br><span class="line">    ver = &quot;1.0.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-- C# → Lua 回调演示：暴露一个函数给 C# 调用</span><br><span class="line">function Game.on_button_click(name)</span><br><span class="line">    print(&quot;[Lua] 收到按钮点击:&quot;, name)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Lua → C# 调用演示：</span><br><span class="line">-- 假设已在白名单里允许 UnityEngine.Debug 被访问（见下文）</span><br><span class="line">CS.UnityEngine.Debug.Log(&quot;[Lua] 我在调用 C# 的 Debug.Log&quot;)</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">### 2）C# 侧加载与互调（`LuaBootstrap.cs`，挂到任一场景物体）</span><br><span class="line"></span><br><span class="line">```csharp</span><br><span class="line">using System;                               // 提供 Action/Delegate 等</span><br><span class="line">using System.IO;                            // 文件读写</span><br><span class="line">using UnityEngine;                          // Unity 基础</span><br><span class="line">using XLua;                                 // xLua 入口</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// LuaBootstrap：最小可运行示例</span><br><span class="line">/// - 负责创建 LuaEnv、注入自定义加载器、执行 main.lua</span><br><span class="line">/// - 演示 C# 调 Lua 与 Lua 调 C#</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class LuaBootstrap : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private LuaEnv _env;                    // Lua 虚拟机</span><br><span class="line">    private const string PERSISTENT_LUA = &quot;lua&quot;; // persistentDataPath 下的热更相对目录</span><br><span class="line">    private const string STREAMING_LUA  = &quot;Lua&quot;; // StreamingAssets 下的内置目录</span><br><span class="line">    private const string RESOURCES_LUA  = &quot;Lua&quot;; // Resources 下的查找目录（不用带后缀）</span><br><span class="line"></span><br><span class="line">    void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        // 1) 创建 LuaEnv（一个项目通常一个全局实例）</span><br><span class="line">        _env = new LuaEnv();</span><br><span class="line"></span><br><span class="line">        // 2) 注册自定义加载器：按“热更 &gt; 内置 &gt; Resources”优先级查找 .lua/.lua.txt</span><br><span class="line">        _env.AddLoader(CustomLoader);</span><br><span class="line"></span><br><span class="line">        // 3) 允许 Lua 访问的 C# 类型，需要走生成（见下文白名单）</span><br><span class="line">        //    这里只演示执行 main.lua</span><br><span class="line">        _env.DoString(&quot;require &#x27;main&#x27;&quot;);    // 等价于 require(&quot;main&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ========== 自定义加载器 ==========</span><br><span class="line">    private byte[] CustomLoader(ref string filepath)</span><br><span class="line">    &#123;</span><br><span class="line">        // filepath 形如 &#x27;main&#x27; 或 &#x27;core/util&#x27;，我们要把它映射到实际文件</span><br><span class="line">        // 依次尝试从：Persistent（热更）→ StreamingAssets（内置）→ Resources（开发期）读取</span><br><span class="line"></span><br><span class="line">        // 1) Persistent：&#123;persistentDataPath&#125;/lua/&#123;path&#125;.lua(.txt)</span><br><span class="line">        var bytes = TryReadBytes(</span><br><span class="line">            Path.Combine(Application.persistentDataPath, PERSISTENT_LUA),</span><br><span class="line">            filepath</span><br><span class="line">        );</span><br><span class="line">        if (bytes != null) return bytes;</span><br><span class="line"></span><br><span class="line">        // 2) StreamingAssets：&#123;StreamingAssets&#125;/Lua/&#123;path&#125;.lua(.txt)</span><br><span class="line">        bytes = TryReadBytes(</span><br><span class="line">            Path.Combine(Application.streamingAssetsPath, STREAMING_LUA),</span><br><span class="line">            filepath</span><br><span class="line">        );</span><br><span class="line">        if (bytes != null) return bytes;</span><br><span class="line"></span><br><span class="line">        // 3) Resources：Resources/Lua/&#123;path&#125;.lua.txt</span><br><span class="line">        // 注意：Resources 只能用 TextAsset 读，且不带扩展名</span><br><span class="line">        var resPath = $&quot;&#123;RESOURCES_LUA&#125;/&#123;filepath&#125;&quot;;</span><br><span class="line">        var ta = Resources.Load&lt;TextAsset&gt;(resPath);</span><br><span class="line">        if (ta != null) return ta.bytes;</span><br><span class="line"></span><br><span class="line">        return null; // 返回 null 让下一个加载器尝试（或报错）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 在指定根目录下尝试读取 path.lua / path.lua.txt</span><br><span class="line">    private byte[] TryReadBytes(string root, string filepath)</span><br><span class="line">    &#123;</span><br><span class="line">        // 把 &#x27;core/util&#x27; 变成实际路径</span><br><span class="line">        var fullLua = Path.Combine(root, filepath + &quot;.lua&quot;);</span><br><span class="line">        var fullLuaTxt = Path.Combine(root, filepath + &quot;.lua.txt&quot;);</span><br><span class="line"></span><br><span class="line">        if (File.Exists(fullLua))    return File.ReadAllBytes(fullLua);</span><br><span class="line">        if (File.Exists(fullLuaTxt)) return File.ReadAllBytes(fullLuaTxt);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ========== C# 调 Lua 示例 ==========</span><br><span class="line">    [ContextMenu(&quot;Call Lua Function&quot;)]</span><br><span class="line">    public void CallLuaFunction()</span><br><span class="line">    &#123;</span><br><span class="line">        // 从全局表里取 Game.on_button_click 并调用</span><br><span class="line">        var gameTbl = _env.Global.Get&lt;LuaTable&gt;(&quot;Game&quot;);  // 取到 Game 表</span><br><span class="line">        if (gameTbl != null)</span><br><span class="line">        &#123;</span><br><span class="line">            var func = gameTbl.Get&lt;Action&lt;string&gt;&gt;(&quot;on_button_click&quot;);</span><br><span class="line">            func?.Invoke(&quot;StartButton&quot;);</span><br><span class="line">            gameTbl.Dispose(); // 用完释放 LuaTable</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnDestroy()</span><br><span class="line">    &#123;</span><br><span class="line">        // 释放 LuaEnv（如果全局单例，应在进程退出前统一释放）</span><br><span class="line">        _env?.Dispose();</span><br><span class="line">        _env = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行方式：<br>1）把 <code>main.lua.txt</code> 放到 <code>Assets/Resources/Lua/</code>，按上面目录。<br>2）把 <code>LuaBootstrap</code> 挂到场景任意物体。<br>3）播放场景，Console 应看到 Lua 与 C# 互调日志。<br>4）在 Inspector 上点组件右上角三点 → <code>Call Lua Function</code> 触发 C#→Lua 调用。</p></blockquote><hr><h2 id="四、白名单与代码生成（Lua↔C-互调的“门票”）"><a href="#四、白名单与代码生成（Lua↔C-互调的“门票”）" class="headerlink" title="四、白名单与代码生成（Lua↔C# 互调的“门票”）"></a>四、白名单与代码生成（Lua↔C# 互调的“门票”）</h2><p>xLua 出于安全与性能考虑，需要你<strong>声明允许互调的类型&#x2F;接口</strong>，并<strong>运行代码生成</strong>。</p><h3 id="1）白名单示例（放-XLuaConfig-cs）"><a href="#1）白名单示例（放-XLuaConfig-cs）" class="headerlink" title="1）白名单示例（放 XLuaConfig.cs）"></a>1）白名单示例（放 <code>XLuaConfig.cs</code>）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> xLua 互调白名单配置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> - LuaCallCSharp：Lua 侧可直接访问的 C# 类型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> - CSharpCallLua：C# 侧将 Lua 函数“看作”某个委托接口来调用</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">XLuaConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Lua 可直接访问的 C# 类型（例子只列常用，按需补充）</span></span><br><span class="line">    [<span class="meta">LuaCallCSharp</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; LuaCallCSharpTypes = <span class="keyword">new</span> List&lt;Type&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typeof</span>(Debug),                  <span class="comment">// UnityEngine.Debug.Log</span></span><br><span class="line">        <span class="keyword">typeof</span>(GameObject),</span><br><span class="line">        <span class="keyword">typeof</span>(Transform),</span><br><span class="line">        <span class="keyword">typeof</span>(Time)</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 你的项目里常用到的工具类型</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C# 将 Lua 函数映射为“委托/接口”的声明</span></span><br><span class="line">    <span class="comment">// 用于 C# 调 Lua：Get&lt;Action&lt;...&gt;&gt;() 这种方式也可，但接口能做更复杂的桥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBtnHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnClick</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">CSharpCallLua</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; CSharpCallLuaTypes = <span class="keyword">new</span> List&lt;Type&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typeof</span>(Action),                 <span class="comment">// 无参 Lua 函数</span></span><br><span class="line">        <span class="keyword">typeof</span>(Action&lt;<span class="built_in">string</span>&gt;),         <span class="comment">// 一个字符串参数的 Lua 函数</span></span><br><span class="line">        <span class="keyword">typeof</span>(IBtnHandler)             <span class="comment">// 自定义接口，用于复杂回调</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>生成代码</strong>：菜单 <code>XLua/Generate Code</code> → 生成桥接代码；<br><strong>清理</strong>：<code>XLua/Clear All</code>；<br><strong>IL2CPP 平台</strong>需要<strong>先生成</strong>再出包，否则互调会缺失。</p></blockquote><hr><h2 id="五、Hotfix-正确认知（安全边界）"><a href="#五、Hotfix-正确认知（安全边界）" class="headerlink" title="五、Hotfix 正确认知（安全边界）"></a>五、Hotfix 正确认知（安全边界）</h2><ul><li><strong>原理</strong>：在运行时把某个 C# 方法的实现替换为 Lua 实现（以 <code>HotfixAttribute</code> 标记或配置方式）。</li><li><strong>平台限制</strong>：IL2CPP（iOS 等）通常<strong>不可用</strong>或极不稳定；Android Mono 可用性较高；建议把<strong>热更重点放在“逻辑迁移到 Lua”</strong>，而非依赖 C# 热更。</li><li><strong>实战建议</strong>：<br>1）把迭代频繁的<strong>业务逻辑</strong>做成 Lua；<br>2）C# 侧提供<strong>稳定 API（服务层&#x2F;适配层）</strong>；<br>3）通过热更新<strong>替换 Lua</strong> 文件（persistentDataPath 覆盖），即可实现“发补丁”。</li></ul><hr><h2 id="六、性能与内存小抄"><a href="#六、性能与内存小抄" class="headerlink" title="六、性能与内存小抄"></a>六、性能与内存小抄</h2><ul><li><p><strong>LuaEnv 建议全局单例</strong>，不要频繁创建&#x2F;销毁。</p></li><li><p><strong>表&#x2F;函数缓存</strong>：频繁调用的 Lua 函数，用 <code>Get&lt;Delegate&gt;</code> 后<strong>缓存引用</strong>，避免每帧查表。</p></li><li><p><strong>GC 管理</strong>：</p><ul><li>C# 获取到的 <code>LuaTable/Function</code> 用完 <code>Dispose()</code>；</li><li>大量临时表会触发 Lua GC，尽量<strong>复用表</strong>或少分配。</li></ul></li><li><p><strong>数据桥</strong>：大对象&#x2F;列表<strong>不要频繁跨语言边界传</strong>；可传 id，再由一侧去查。</p></li><li><p><strong>日志</strong>：<code>Debug.Log</code> 很慢，热点路径减少日志。</p></li></ul><hr><h2 id="七、常见坑（你八成会踩）"><a href="#七、常见坑（你八成会踩）" class="headerlink" title="七、常见坑（你八成会踩）"></a>七、常见坑（你八成会踩）</h2><ol><li><strong>路径与扩展名</strong>：Resources 加载<strong>不带扩展名</strong>，但我们脚本一般命名 <code>.lua.txt</code>。自定义加载器要分别处理。</li><li><strong>编码</strong>：UTF-8（无 BOM）最稳；Windows 记事本容易存成 ANSI 导致中文乱码。</li><li><strong>IL2CPP</strong>：别指望 Hotfix 全能；走 Lua 驱动是长期解法。</li><li><strong>生成没跑</strong>：忘记 <code>XLua/Generate Code</code> 导致互调类型失效。</li><li><strong>多 Env</strong>：多个 LuaEnv 之间<strong>不共享</strong>全局，除非你明确桥接；一般只用一个。</li><li><strong>移动端路径</strong>：<code>persistentDataPath</code> 每台设备不同，热更下载后要放在同目录结构下（见前面的 <code>lua/</code> 目录）。</li></ol><hr><h2 id="八、发布与热更流程"><a href="#八、发布与热更流程" class="headerlink" title="八、发布与热更流程"></a>八、发布与热更流程</h2><ul><li><strong>开发期</strong>：脚本放 <code>Assets/Resources/Lua/</code>，<code>LuaBootstrap</code> 执行 <code>require &#39;main&#39;</code> 即可预览。</li><li><strong>首包</strong>：把稳定版本脚本复制到 <code>StreamingAssets/Lua/</code> 一份，便于离线跑。</li><li><strong>热更包</strong>：服务端下发增量脚本到 <code>persistentDataPath/lua/</code>（同路径结构），下次加载优先使用热更版本。</li><li><strong>验证</strong>：在 <code>LuaBootstrap</code> 临时打印 <code>Application.persistentDataPath</code>，确认文件确实落地。</li></ul><hr><h2 id="九、参考操作清单（照做就行）"><a href="#九、参考操作清单（照做就行）" class="headerlink" title="九、参考操作清单（照做就行）"></a>九、参考操作清单（照做就行）</h2><ol><li>装好 xLua（导入包&#x2F;子模块），运行 <code>XLua/Generate Code</code>。</li><li>建好目录（<code>Scripts_Lua</code>、<code>Resources/Lua</code>、<code>StreamingAssets/Lua</code>）。</li><li>写 <code>main.lua.txt</code>，把上面的 C# <code>LuaBootstrap</code> 挂到场景。</li><li>运行看日志；调用一次 <code>Call Lua Function</code>。</li><li>做一个“按钮点击 → 调 Lua → Lua 再调 C#”的小闭环。</li><li>做热更演示：把同名脚本放到 <code>persistentDataPath/lua/</code>，重启后查看是否生效。</li></ol><hr><h2 id="十、结语"><a href="#十、结语" class="headerlink" title="十、结语"></a>十、结语</h2><p>把易变逻辑前移到 Lua、把稳定能力沉到底层 C#，你就获得了<strong>高频迭代</strong>与<strong>可控风险</strong>的双赢。xLua 的难点不在语法，而在工程化：<strong>目录规范 + 加载策略 + 白名单生成 + 数据边界</strong>。本文给你的就是这套“骨架”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 一键发布步骤（Hexo）</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"># 1) 新建文章骨架（会用到你刚设置的 scaffolds/post.md）</span><br><span class="line">hexo new &quot;xLua 热更入门与实践指南&quot;</span><br><span class="line"></span><br><span class="line"># 2) 打开生成的 source/_posts/xLua-热更入门与实践指南.md</span><br><span class="line">#    把上面的整篇内容粘贴进去（Front-matter + 正文）</span><br><span class="line"></span><br><span class="line"># 3) 本地预览</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"># 4) 部署上线</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>需要我再补一篇《xLua 白名单进阶（接口映射 &#x2F; 泛型 &#x2F; 事件订阅）》或《热更资源（AB&#x2F;Addressables）与 Lua 的协作》吗？我可以按同样规范再写一篇系列文，贴上就能发。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xLua </tag>
            
            <tag> 热更新 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/17/hello-world/"/>
      <url>/2025/08/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
